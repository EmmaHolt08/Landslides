{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Renamed from AuthPage to AuthProvider for clarity\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null); // Assuming this is user.uid\n  const [token, setToken] = useState(null);\n  const [authReady, setAuthReady] = useState(false); // Renamed from authReady for initial load\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n\n  // New state to indicate if initial token check is complete\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  // --- Fetches user data from the backend using the token ---\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n      return;\n    }\n    try {\n      // You need an endpoint to validate a token and return user info.\n      // Let's assume you have a /users/me endpoint that requires a valid token\n      // and returns user's email and id.\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser({\n          email: data.email,\n          uid: data.id\n        }); // Assuming data.id for uid\n        setUserId(data.id);\n        setToken(authToken); // Keep the token\n      } else {\n        // Token might be invalid or expired\n        console.error(\"Token validation failed or user not found.\");\n        localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user from token:', error);\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n    } finally {\n      // This ensures that the loading state is always turned off\n      // once the initial token check is complete.\n      setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL]);\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      setIsLoadingAuth(false); // No token, so not loading auth\n    }\n    // Set authReady (or isLoadingAuth) once initial checks are done\n  }, [fetchUserFromToken]);\n  const handleSignUp = async (email, password) => {\n    // Accept email, password as arguments\n    setAuthError('');\n    setMessage('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // After successful registration, log them in immediately using the /token endpoint\n        // Or your /register endpoint could return the access_token directly, which simplifies things.\n        // Assuming /register returns user details, but for token, you typically call /token\n\n        // Option 1: Call /token after registration\n        const signInSuccess = await handleSignIn(email, password); // Reuse sign-in logic\n        if (signInSuccess) {\n          setMessage('Account created successfully! You are now logged in.');\n          return true; // Indicate success\n        } else {\n          setAuthError('Account created, but automatic login failed. Please sign in manually.');\n          return false;\n        }\n\n        // Option 2: If /register returned token directly (your backend currently doesn't)\n        // localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        // setToken(data.access_token);\n        // setUser({ email: data.email, uid: data.id }); // Assuming data.id is the user ID\n        // setUserId(data.id);\n        // setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  };\n  const handleSignIn = async (email, password) => {\n    // Accept email, password as arguments\n    setAuthError('');\n    setMessage('');\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email); // Your backend uses 'username' for email\n      details.append('password', password);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        }); // Assuming data.user_id is the user ID\n        setUserId(data.user_id);\n        setMessage('Logged in successfully!');\n        return true; // Indicate success\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  };\n  const handleSignOut = useCallback(() => {\n    // No need for async unless you have a logout API\n    setAuthError('');\n    setMessage('Logged out successfully.');\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  }, []);\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    // provide userId here\n    token,\n    isLoadingAuth,\n    // provide loading state\n    authError,\n    message,\n    handleSignIn,\n    // Pass functions as is, don't wrap in email/password state\n    handleSignUp,\n    // Pass functions as is\n    handleSignOut\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n\n  // Render loading state if auth check is in progress\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"EU8SS/5ceHWvkTgtU/LJoJ0OTq4=\");\n_c = AuthProvider;\nexport default AuthProvider;\n\n// NEW COMPONENT: LoginForm.js (or directly in App.js routes)\n// This component encapsulates the login/signup form\nexport const LoginForm = () => {\n  _s2();\n  const {\n    handleSignIn,\n    handleSignUp,\n    authError,\n    message,\n    isLoadingAuth // This will be false by the time LoginForm renders\n  } = useContext(AuthContext);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const onSubmitSignIn = async () => {\n    await handleSignIn(email, password);\n  };\n  const onSubmitSignUp = async () => {\n    await handleSignUp(email, password);\n  };\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading authentication form...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 16\n    }, this); // Should not be seen if used correctly\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-form-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"auth-form-title\",\n        children: \"Landslide Report Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-error-message\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"auth-message-strong\",\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"auth-message-span\",\n          children: authError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-info-message\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"auth-message-strong\",\n          children: \"Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"auth-message-span\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            className: \"auth-label\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\" // Use type=\"email\" for email input\n            ,\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            className: \"auth-input\",\n            placeholder: \"your.email@example.com\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            className: \"auth-label\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            className: \"auth-input\",\n            placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSubmitSignIn,\n            className: \"auth-button auth-button-primary\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSubmitSignUp,\n            className: \"auth-button auth-button-secondary\",\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 9\n  }, this);\n};\n\n// \n// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n\n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   }, []);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n_s2(LoginForm, \"r6tzeTyQBwX8IGqcbva1BCC9YAM=\");\n_c2 = LoginForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"LoginForm\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","useCallback","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthProvider","children","_s","user","setUser","userId","setUserId","token","setToken","authReady","setAuthReady","authError","setAuthError","message","setMessage","API_BASE_URL","isLoadingAuth","setIsLoadingAuth","fetchUserFromToken","authToken","response","fetch","method","headers","ok","data","json","email","uid","id","console","error","localStorage","removeItem","storedToken","getItem","handleSignUp","password","body","JSON","stringify","signInSuccess","handleSignIn","errorData","detail","details","URLSearchParams","append","toString","setItem","access_token","user_id","handleSignOut","authContextValue","useMemo","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","LoginForm","_s2","setEmail","setPassword","onSubmitSignIn","onSubmitSignUp","role","htmlFor","type","onChange","e","target","placeholder","onClick","_c2","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext, useCallback } from 'react';\n\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthProvider = ({ children }) => { // Renamed from AuthPage to AuthProvider for clarity\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null); // Assuming this is user.uid\n  const [token, setToken] = useState(null); \n  const [authReady, setAuthReady] = useState(false); // Renamed from authReady for initial load\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  // New state to indicate if initial token check is complete\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  // --- Fetches user data from the backend using the token ---\n  const fetchUserFromToken = useCallback(async (authToken) => {\n      if (!authToken) {\n          setUser(null);\n          setUserId(null);\n          setToken(null);\n          return;\n      }\n      try {\n          // You need an endpoint to validate a token and return user info.\n          // Let's assume you have a /users/me endpoint that requires a valid token\n          // and returns user's email and id.\n          const response = await fetch(`${API_BASE_URL}/users/me`, {\n              method: 'GET',\n              headers: {\n                  'Authorization': `Bearer ${authToken}`,\n                  'Content-Type': 'application/json',\n              },\n          });\n\n          if (response.ok) {\n              const data = await response.json();\n              setUser({ email: data.email, uid: data.id }); // Assuming data.id for uid\n              setUserId(data.id);\n              setToken(authToken); // Keep the token\n          } else {\n              // Token might be invalid or expired\n              console.error(\"Token validation failed or user not found.\");\n              localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n              setUser(null);\n              setUserId(null);\n              setToken(null);\n          }\n      } catch (error) {\n          console.error('Error fetching user from token:', error);\n          localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n          setUser(null);\n          setUserId(null);\n          setToken(null);\n      } finally {\n          // This ensures that the loading state is always turned off\n          // once the initial token check is complete.\n          setIsLoadingAuth(false);\n      }\n  }, [API_BASE_URL]);\n\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        setIsLoadingAuth(false); // No token, so not loading auth\n    }\n    // Set authReady (or isLoadingAuth) once initial checks are done\n  }, [fetchUserFromToken]);\n\n  const handleSignUp = async (email, password) => { // Accept email, password as arguments\n    setAuthError('');\n    setMessage('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // After successful registration, log them in immediately using the /token endpoint\n        // Or your /register endpoint could return the access_token directly, which simplifies things.\n        // Assuming /register returns user details, but for token, you typically call /token\n        \n        // Option 1: Call /token after registration\n        const signInSuccess = await handleSignIn(email, password); // Reuse sign-in logic\n        if (signInSuccess) {\n            setMessage('Account created successfully! You are now logged in.');\n            return true; // Indicate success\n        } else {\n            setAuthError('Account created, but automatic login failed. Please sign in manually.');\n            return false;\n        }\n        \n        // Option 2: If /register returned token directly (your backend currently doesn't)\n        // localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        // setToken(data.access_token);\n        // setUser({ email: data.email, uid: data.id }); // Assuming data.id is the user ID\n        // setUserId(data.id);\n        // setMessage('Account created successfully! You are now logged in.');\n\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  };\n\n  const handleSignIn = async (email, password) => { // Accept email, password as arguments\n    setAuthError('');\n    setMessage('');\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email); // Your backend uses 'username' for email\n      details.append('password', password);\n\n      const response = await fetch(`${API_BASE_URL}/token`, { \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: details.toString(),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id }); // Assuming data.user_id is the user ID\n        setUserId(data.user_id);\n        setMessage('Logged in successfully!');\n        return true; // Indicate success\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n   };\n\n  const handleSignOut = useCallback(() => { // No need for async unless you have a logout API\n    setAuthError('');\n    setMessage('Logged out successfully.');\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  }, []);\n\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId, // provide userId here\n    token,\n    isLoadingAuth, // provide loading state\n    authError,\n    message,\n    handleSignIn, // Pass functions as is, don't wrap in email/password state\n    handleSignUp, // Pass functions as is\n    handleSignOut,\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]); \n\n  // Render loading state if auth check is in progress\n  if (isLoadingAuth) {\n      return (\n          <div className=\"auth-loading-container\">\n              <div className=\"auth-loading-box\">\n                  <p className=\"auth-loading-text\">Loading authentication...</p>\n              </div>\n          </div>\n      );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n\n// NEW COMPONENT: LoginForm.js (or directly in App.js routes)\n// This component encapsulates the login/signup form\nexport const LoginForm = () => {\n    const { \n        handleSignIn, \n        handleSignUp, \n        authError, \n        message, \n        isLoadingAuth // This will be false by the time LoginForm renders\n    } = useContext(AuthContext);\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const onSubmitSignIn = async () => {\n        await handleSignIn(email, password);\n    };\n\n    const onSubmitSignUp = async () => {\n        await handleSignUp(email, password);\n    };\n\n    if (isLoadingAuth) {\n        return <p>Loading authentication form...</p>; // Should not be seen if used correctly\n    }\n\n    return (\n        <div className=\"auth-page-container\">\n            <div className=\"auth-form-card\">\n                <h2 className=\"auth-form-title\">\n                    Landslide Report Login\n                </h2>\n\n                {authError && (\n                    <div className=\"auth-error-message\" role=\"alert\">\n                        <strong className=\"auth-message-strong\">Error:</strong>\n                        <span className=\"auth-message-span\">{authError}</span>\n                    </div>\n                )}\n\n                {message && (\n                    <div className=\"auth-info-message\" role=\"alert\">\n                        <strong className=\"auth-message-strong\">Info:</strong>\n                        <span className=\"auth-message-span\">{message}</span>\n                    </div>\n                )}\n                \n                {/* Removed duplicate 'username' input as your backend uses 'email' as username */}\n                <div>\n                    <div className=\"auth-input-group\">\n                        <label htmlFor=\"email\" className=\"auth-label\">\n                            Email:\n                        </label>\n                        <input\n                            type=\"email\" // Use type=\"email\" for email input\n                            id=\"email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            className=\"auth-input\"\n                            placeholder=\"your.email@example.com\"\n                        />\n                    </div>\n                    <div className=\"auth-input-group\">\n                        <label htmlFor=\"password\" className=\"auth-label\">\n                            Password:\n                        </label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            className=\"auth-input\"\n                            placeholder=\"••••••••\"\n                        />\n                    </div>\n\n                    <div className=\"auth-button-group\">\n                        <button\n                            onClick={onSubmitSignIn}\n                            className=\"auth-button auth-button-primary\"\n                        >\n                            Sign In\n                        </button>\n                        <button\n                            onClick={onSubmitSignUp}\n                            className=\"auth-button auth-button-secondary\"\n                        >\n                            Sign Up\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\n\n\n\n// \n// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n      \n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   }, []);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n            \n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n            \n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n\n\n\n\n\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;"],"mappings":"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AAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAMD;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAK,GAAA,CA1nBaD,SAAS;AAAAc,GAAA,GAATd,SAAS;AAAA,IAAAD,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}