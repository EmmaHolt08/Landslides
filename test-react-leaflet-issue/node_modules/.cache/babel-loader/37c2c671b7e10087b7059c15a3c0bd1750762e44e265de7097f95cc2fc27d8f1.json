{"ast":null,"code":"// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n\n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   }, []);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Username:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;","map":{"version":3,"names":[],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n      \n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   }, []);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n            \n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Username:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n            \n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n\n\n\n\n\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}