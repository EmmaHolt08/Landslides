{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\n//i broke it all there is no sign in page how did i even do that\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      setIsExplicitlyLoggedIn(true);\n      setToken(storedToken);\n      fetchUserFromToken(storedToken);\n    }\n    setAuthReady(true);\n  }, []);\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      // No token, so user is not logged in\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n      setIsLoadingAuth(false); // Finished loading if no token\n      return;\n    }\n    try {\n      // IMPORTANT: You need a backend endpoint that validates the token\n      // and returns the user's email and ID based on that token.\n      // I'm assuming '/users/me' for this example.\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          // Send the token in the Authorization header\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Ensure data.id and data.email match what your backend /users/me returns\n        setUser({\n          email: data.email,\n          uid: data.id\n        }); // Assuming backend sends 'id'\n        setUserId(data.id); // Set userId from backend response\n        setToken(authToken); // Keep the token as it's valid\n      } else {\n        // Token might be invalid, expired, or user not found\n        console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n        localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user from token:', error);\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n    } finally {\n      // This ensures that the loading state is always turned off\n      // once the initial token check is complete, whether successful or not.\n      setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      setIsLoadingAuth(false); // No token found, so auth loading is complete\n    }\n  }, [fetchUserFromToken]);\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email);\n      details.append('password', password);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token,\n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isExplicitlyLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"username\",\n                className: \"auth-label\",\n                children: \"Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"username\",\n                id: \"username\",\n                value: username,\n                onChange: e => setUsername(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your_username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"email\",\n                value: email,\n                onChange: e => setEmail(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                id: \"password\",\n                value: password,\n                onChange: e => setPassword(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"2LnokKzD0oAHeUu3iK7dvy/vGJw=\");\n_c = AuthPage;\nexport default AuthPage;\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","userId","setUserId","token","setToken","isExplicitlyLoggedIn","setIsExplicitlyLoggedIn","email","setEmail","password","setPassword","username","setUsername","authError","setAuthError","authReady","setAuthReady","message","setMessage","isLoadingAuth","setIsLoadingAuth","API_BASE_URL","storedToken","localStorage","getItem","fetchUserFromToken","authToken","response","fetch","method","headers","ok","data","json","uid","id","console","error","status","removeItem","handleSignUp","body","JSON","stringify","setItem","access_token","user_id","errorData","detail","handleSignIn","details","URLSearchParams","append","toString","handleSignOut","authContextValue","useMemo","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\n//i broke it all there is no sign in page how did i even do that\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); \n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      \n      setIsExplicitlyLoggedIn(true);\n      setToken(storedToken);\n      fetchUserFromToken(storedToken);\n\n    }\n    setAuthReady(true); \n  }, []);\n\n  const fetchUserFromToken = useCallback(async (authToken) => {\nif (!authToken) {\n        // No token, so user is not logged in\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n        setIsLoadingAuth(false); // Finished loading if no token\n        return;\n    }\n\n    try {\n        // IMPORTANT: You need a backend endpoint that validates the token\n        // and returns the user's email and ID based on that token.\n        // I'm assuming '/users/me' for this example.\n        const response = await fetch(`${API_BASE_URL}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${authToken}`, // Send the token in the Authorization header\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            // Ensure data.id and data.email match what your backend /users/me returns\n            setUser({ email: data.email, uid: data.id }); // Assuming backend sends 'id'\n            setUserId(data.id); // Set userId from backend response\n            setToken(authToken); // Keep the token as it's valid\n        } else {\n            // Token might be invalid, expired, or user not found\n            console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n            localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n            setUser(null);\n            setUserId(null);\n            setToken(null);\n        }\n    } catch (error) {\n        console.error('Error fetching user from token:', error);\n        localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n    } finally {\n        // This ensures that the loading state is always turned off\n        // once the initial token check is complete, whether successful or not.\n        setIsLoadingAuth(false);\n    }\n}, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\nuseEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        setIsLoadingAuth(false); // No token found, so auth loading is complete\n    }\n}, [fetchUserFromToken]);\n\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email); \n      details.append('password', password);\n\n      const response = await fetch(`${API_BASE_URL}/token`, { \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: details.toString(),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n   };\n\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token, \n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password,\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isExplicitlyLoggedIn) {\n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n            \n            <div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"username\" className=\"auth-label\">\n                  Username:\n                </label>\n                <input\n                  type=\"username\"\n                  id=\"username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"your_username\"\n                />\n              </div>\n            \n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn}\n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp}\n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n\n\n\n\n\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;"],"mappings":"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BAAiB;IAAA1D,QAAA,EAC3CA;EAAQ;IAAA6D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/D,EAAA,CAjTIF,QAAQ;AAAA4E,EAAA,GAAR5E,QAAQ;AAmTd,eAAeA,QAAQ;;AAQvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}