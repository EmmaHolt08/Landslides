{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [user_id, setUser_id] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  const [inputUsername, setInputUsername] = useState('');\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n  const navigate = useNavigate();\n  const applyAuthData = useCallback((authToken, userData = null) => {\n    setAuthError('');\n    setMessage('');\n    if (authToken && userData) {\n      localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n      setToken(authToken);\n      setUser({\n        email: userData.email,\n        user_id: userData.user_id,\n        username: userData.username\n      });\n      setUser_id(userData.user_id);\n    } else {\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n      setToken(null);\n      setUser(null);\n      setUser_id(null);\n    }\n  }, []);\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      applyAuthData(null);\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data && typeof data.user_id === 'string' && typeof data.email === 'string') {\n          applyAuthData(authToken, {\n            user_id: data.user_id,\n            email: data.email,\n            username: data.username\n          });\n        } else {\n          console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n          applyAuthData(null);\n        }\n      } else {\n        const errorData = await response.json();\n        console.error(\"DEBUG: /users/me fetch failed. Status:\", response.status, \"Details:\", errorData);\n        applyAuthData(null);\n      }\n    } catch (error) {\n      console.error('DEBUG: Network error during /users/me fetch:', error);\n      applyAuthData(null);\n    } finally {\n      setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL, applyAuthData]);\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]);\n  const handleSignInInternal = useCallback(async (signInEmail, signInPassword, signInUsername) => {\n    setAuthError('');\n    setMessage('');\n    // Removed signInUsername from validation as backend only uses email/password for /token\n    if (!signInEmail || !signInPassword) {\n      setAuthError('Please enter email and password.');\n      return false;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('email', signInEmail);\n      details.append('password', signInPassword);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Ensure these keys match your backend's Token response model\n        // Token response has user_id, username, user_email\n        applyAuthData(data.access_token, {\n          user_id: data.user_id,\n          user_email: data.user_email,\n          username: data.username\n        });\n        setMessage('Logged in successfully!');\n        setInputEmail('');\n        setInputPassword('');\n        setInputUsername(''); // Clear username field too\n        navigate('/');\n        return true;\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.'); // Updated error message\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  }, [API_BASE_URL, applyAuthData, navigate]); // Dependencies for handleSignInInternal\n\n  const handleSignUp = useCallback(async () => {\n    setAuthError('');\n    setMessage('');\n    if (!inputEmail || !inputPassword || !inputUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: inputUsername,\n          email: inputEmail,\n          password: inputPassword\n        })\n      });\n      if (response.ok) {\n        // After successful registration, attempt to sign in the new user\n        const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername); // Pass required arguments\n        if (signInSuccess) {\n          setMessage('Account created successfully! You are now logged in.');\n          // Input fields are cleared by handleSignInInternal if successful\n        } else {\n          setAuthError('Account created, but automatic login failed. Please sign in manually.');\n        }\n      } else {\n        const errorData = await response.json();\n        console.error(\"DEBUG: Backend error details:\", errorData);\n        let errorMessage = 'An unknown error occurred.';\n        if (errorData.detail) {\n          if (typeof errorData.detail === 'string') {\n            errorMessage = errorData.detail;\n          } else if (Array.isArray(errorData.detail) && errorData.detail.length > 0) {\n            errorMessage = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n          } else {\n            errorMessage = JSON.stringify(errorData.detail);\n          }\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        }\n        setAuthError(errorMessage || 'Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  }, [inputEmail, inputPassword, inputUsername, API_BASE_URL, handleSignInInternal, setAuthError, setMessage]); // Dependencies for handleSignUp\n\n  // const handleSignUp =  async () => { \n  //   setAuthError('');\n  //   setMessage('');\n  //   if (!inputEmail || !inputPassword || !inputUsername) {\n  //     setAuthError('Please enter email, username, and password.');\n  //     return;\n  //   }\n\n  //   try {\n  //       const response = await fetch(`${API_BASE_URL}/register`, {\n  //           method: 'POST',\n  //           headers: { 'Content-Type': 'application/json' },\n  //           body: JSON.stringify({username: inputUsername, email: inputEmail, password: inputPassword }),\n  //       });\n\n  //       if (response.ok) {\n  //           const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername); \n  //           if (signInSuccess) {\n  //               setMessage('Account created successfully! You are now logged in.');\n  //               setInputEmail('');\n  //               setInputPassword('');\n  //               setInputUsername('');\n  //               setUser_id('');\n  //               navigate('/'); \n  //           } else {\n  //               setAuthError('Account created, but automatic login failed. Please sign in manually.');\n  //           }\n  //       } else {\n  //   const errorData = await response.json();\n  //   console.error(\"DEBUG: Backend error details:\", errorData); // Log the full error data\n\n  //   let errorMessage = 'An unknown error occurred.';\n  //   if (errorData.detail) {\n  //       if (typeof errorData.detail === 'string') {\n  //           errorMessage = errorData.detail; // For simple string errors\n  //       } else if (Array.isArray(errorData.detail) && errorData.detail.length > 0) {\n  //           // 422 errors\n  //           errorMessage = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n  //       } else {\n  //           // Fallback \n  //           errorMessage = JSON.stringify(errorData.detail);\n  //       }\n  //   } else if (errorData.message) { \n  //       errorMessage = errorData.message;\n  //   }\n\n  //   setAuthError(errorMessage || 'Sign up failed.'); \n  // }\n\n  //   } catch (error) {\n  //       console.error('Sign up network error:', error);\n  //       setAuthError('Network error. Please try again.');\n  //   }\n  // };\n\n  // const handleSignInInternal = async (signInEmail, signInPassword, signInUsername) => { \n  //   setAuthError('');\n  //   setMessage('');\n  //   if (!signInEmail || !signInPassword || !signInUsername) {\n  //     setAuthError('Please enter email, username, and password.');\n  //     return false; \n  //   }\n\n  //   try {\n  //       const details = new URLSearchParams();\n  //       details.append('email', signInEmail); \n  //       details.append('password', signInPassword);\n\n  //       const response = await fetch(`${API_BASE_URL}/token`, { \n  //           method: 'POST',\n  //           headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  //           body: details.toString(),\n  //       });\n\n  //       if (response.ok) {\n  //           const data = await response.json(); \n  //           applyAuthData(data.access_token, { user_id: data.user_id, email: data.email, username: data.username });\n  //           setMessage('Logged in successfully!');\n  //           setInputEmail('');\n  //           setInputPassword('');\n  //           setInputUsername('');\n  //           navigate('/'); \n  //           return true; \n  //       } else {\n  //           const errorData = await response.json();\n  //           setAuthError(errorData.detail || 'Invalid email, username, or password.');\n  //           return false; \n  //       }\n  //   } catch (error) {\n  //       console.error('Sign in network error:', error);\n  //       setAuthError('Network error. Please try again.');\n  //       return false; \n  //   }\n  // };\n\n  const handleSignIn = useCallback(async () => {\n    await handleSignInInternal(inputEmail, inputPassword, inputUsername); // Pass required arguments\n  }, [inputEmail, inputPassword, inputUsername, handleSignInInternal]); // Dependencies for handleSignIn\n\n  // const handleSignIn = async () => {\n  //   await handleSignInInternal(inputEmail, inputPassword, inputUsername);\n  // };\n\n  const handleSignOut = useCallback(async () => {\n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null);\n    navigate('/');\n  }, [applyAuthData, navigate]);\n  const authContextValue = useMemo(() => ({\n    user,\n    user_id,\n    token,\n    isLoadingAuth,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut\n  }), [user, user_id, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"user_email\",\n                value: inputEmail,\n                onChange: e => setInputEmail(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"username\",\n                className: \"auth-label\",\n                children: \"Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"username\",\n                id: \"username\",\n                value: inputUsername,\n                onChange: e => setInputUsername(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"user_password\",\n                id: \"password\",\n                value: inputPassword,\n                onChange: e => setInputPassword(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"mlPSRbwWPHudRh1UAY9De425sBI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","useMemo","useNavigate","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","user_id","setUser_id","token","setToken","isLoadingAuth","setIsLoadingAuth","authError","setAuthError","message","setMessage","inputEmail","setInputEmail","inputPassword","setInputPassword","inputUsername","setInputUsername","API_BASE_URL","navigate","applyAuthData","authToken","userData","localStorage","setItem","email","username","removeItem","fetchUserFromToken","response","fetch","method","headers","ok","data","json","console","error","errorData","status","storedToken","getItem","handleSignInInternal","signInEmail","signInPassword","signInUsername","details","URLSearchParams","append","body","toString","access_token","user_email","detail","handleSignUp","JSON","stringify","password","signInSuccess","errorMessage","Array","isArray","length","map","err","loc","join","msg","handleSignIn","handleSignOut","authContextValue","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","id","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom'; \n\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [user_id, setUser_id] = useState(null);\n  const [token, setToken] = useState(null); \n\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true); \n\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  const [inputUsername, setInputUsername] = useState('');\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  const navigate = useNavigate();\n\n  const applyAuthData = useCallback((authToken, userData = null) => {\n      setAuthError(''); \n      setMessage('');   \n\n      if (authToken && userData) {\n          localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n          setToken(authToken);\n          setUser({ email: userData.email, user_id: userData.user_id, username: userData.username });\n          setUser_id(userData.user_id);\n      } else {\n          localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n          setToken(null);\n          setUser(null);\n          setUser_id(null); \n      }\n  }, []); \n\n  const fetchUserFromToken = useCallback(async (authToken) => {\n      if (!authToken) {\n          applyAuthData(null); \n          return;\n      }\n\n      try {\n          const response = await fetch(`${API_BASE_URL}/users/me`, {\n              method: 'GET',\n              headers: {\n                  'Authorization': `Bearer ${authToken}`, \n                  'Content-Type': 'application/json',\n              },\n          });\n\n          if (response.ok) {\n              const data = await response.json(); \n              if (data && typeof data.user_id === 'string' && typeof data.email === 'string') {\n                  applyAuthData(authToken, { user_id: data.user_id, email: data.email, username: data.username }); \n              } else {\n                  console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n                  applyAuthData(null); \n              }\n          } else {\n              const errorData = await response.json();\n              console.error(\"DEBUG: /users/me fetch failed. Status:\", response.status, \"Details:\", errorData);\n              applyAuthData(null); \n          }\n      } catch (error) {\n          console.error('DEBUG: Network error during /users/me fetch:', error);\n          applyAuthData(null); \n      } finally {\n          setIsLoadingAuth(false); \n      }\n  }, [API_BASE_URL, applyAuthData]); \n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    \n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]); \n\n\n  const handleSignInInternal = useCallback(async (signInEmail, signInPassword, signInUsername) => {\n    setAuthError('');\n    setMessage('');\n    // Removed signInUsername from validation as backend only uses email/password for /token\n    if (!signInEmail || !signInPassword) {\n      setAuthError('Please enter email and password.');\n      return false;\n    }\n\n    try {\n        const details = new URLSearchParams();\n        details.append('email', signInEmail);\n        details.append('password', signInPassword);\n\n        const response = await fetch(`${API_BASE_URL}/token`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            body: details.toString(),\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            // Ensure these keys match your backend's Token response model\n            // Token response has user_id, username, user_email\n            applyAuthData(data.access_token, { user_id: data.user_id, user_email: data.user_email, username: data.username });\n            setMessage('Logged in successfully!');\n            setInputEmail('');\n            setInputPassword('');\n            setInputUsername(''); // Clear username field too\n            navigate('/');\n            return true;\n        } else {\n            const errorData = await response.json();\n            setAuthError(errorData.detail || 'Invalid email or password.'); // Updated error message\n            return false;\n        }\n    } catch (error) {\n        console.error('Sign in network error:', error);\n        setAuthError('Network error. Please try again.');\n        return false;\n    }\n  }, [API_BASE_URL, applyAuthData, navigate]); // Dependencies for handleSignInInternal\n\n\n  const handleSignUp = useCallback(async () => {\n    setAuthError('');\n    setMessage('');\n    if (!inputEmail || !inputPassword || !inputUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return;\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/register`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({username: inputUsername, email: inputEmail, password: inputPassword }),\n        });\n\n        if (response.ok) {\n            // After successful registration, attempt to sign in the new user\n            const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername); // Pass required arguments\n            if (signInSuccess) {\n                setMessage('Account created successfully! You are now logged in.');\n                // Input fields are cleared by handleSignInInternal if successful\n            } else {\n                setAuthError('Account created, but automatic login failed. Please sign in manually.');\n            }\n        } else {\n            const errorData = await response.json();\n            console.error(\"DEBUG: Backend error details:\", errorData);\n\n            let errorMessage = 'An unknown error occurred.';\n            if (errorData.detail) {\n                if (typeof errorData.detail === 'string') {\n                    errorMessage = errorData.detail;\n                } else if (Array.isArray(errorData.detail) && errorData.detail.length > 0) {\n                    errorMessage = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n                } else {\n                    errorMessage = JSON.stringify(errorData.detail);\n                }\n            } else if (errorData.message) {\n                errorMessage = errorData.message;\n            }\n\n            setAuthError(errorMessage || 'Sign up failed.');\n        }\n\n    } catch (error) {\n        console.error('Sign up network error:', error);\n        setAuthError('Network error. Please try again.');\n    }\n  }, [inputEmail, inputPassword, inputUsername, API_BASE_URL, handleSignInInternal, setAuthError, setMessage]); // Dependencies for handleSignUp\n\n  // const handleSignUp =  async () => { \n  //   setAuthError('');\n  //   setMessage('');\n  //   if (!inputEmail || !inputPassword || !inputUsername) {\n  //     setAuthError('Please enter email, username, and password.');\n  //     return;\n  //   }\n\n  //   try {\n  //       const response = await fetch(`${API_BASE_URL}/register`, {\n  //           method: 'POST',\n  //           headers: { 'Content-Type': 'application/json' },\n  //           body: JSON.stringify({username: inputUsername, email: inputEmail, password: inputPassword }),\n  //       });\n\n  //       if (response.ok) {\n  //           const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername); \n  //           if (signInSuccess) {\n  //               setMessage('Account created successfully! You are now logged in.');\n  //               setInputEmail('');\n  //               setInputPassword('');\n  //               setInputUsername('');\n  //               setUser_id('');\n  //               navigate('/'); \n  //           } else {\n  //               setAuthError('Account created, but automatic login failed. Please sign in manually.');\n  //           }\n  //       } else {\n  //   const errorData = await response.json();\n  //   console.error(\"DEBUG: Backend error details:\", errorData); // Log the full error data\n\n  //   let errorMessage = 'An unknown error occurred.';\n  //   if (errorData.detail) {\n  //       if (typeof errorData.detail === 'string') {\n  //           errorMessage = errorData.detail; // For simple string errors\n  //       } else if (Array.isArray(errorData.detail) && errorData.detail.length > 0) {\n  //           // 422 errors\n  //           errorMessage = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');\n  //       } else {\n  //           // Fallback \n  //           errorMessage = JSON.stringify(errorData.detail);\n  //       }\n  //   } else if (errorData.message) { \n  //       errorMessage = errorData.message;\n  //   }\n\n  //   setAuthError(errorMessage || 'Sign up failed.'); \n  // }\n\n  //   } catch (error) {\n  //       console.error('Sign up network error:', error);\n  //       setAuthError('Network error. Please try again.');\n  //   }\n  // };\n\n  \n\n  // const handleSignInInternal = async (signInEmail, signInPassword, signInUsername) => { \n  //   setAuthError('');\n  //   setMessage('');\n  //   if (!signInEmail || !signInPassword || !signInUsername) {\n  //     setAuthError('Please enter email, username, and password.');\n  //     return false; \n  //   }\n\n  //   try {\n  //       const details = new URLSearchParams();\n  //       details.append('email', signInEmail); \n  //       details.append('password', signInPassword);\n\n  //       const response = await fetch(`${API_BASE_URL}/token`, { \n  //           method: 'POST',\n  //           headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  //           body: details.toString(),\n  //       });\n\n  //       if (response.ok) {\n  //           const data = await response.json(); \n  //           applyAuthData(data.access_token, { user_id: data.user_id, email: data.email, username: data.username });\n  //           setMessage('Logged in successfully!');\n  //           setInputEmail('');\n  //           setInputPassword('');\n  //           setInputUsername('');\n  //           navigate('/'); \n  //           return true; \n  //       } else {\n  //           const errorData = await response.json();\n  //           setAuthError(errorData.detail || 'Invalid email, username, or password.');\n  //           return false; \n  //       }\n  //   } catch (error) {\n  //       console.error('Sign in network error:', error);\n  //       setAuthError('Network error. Please try again.');\n  //       return false; \n  //   }\n  // };\n\n  const handleSignIn = useCallback(async () => {\n    await handleSignInInternal(inputEmail, inputPassword, inputUsername); // Pass required arguments\n  }, [inputEmail, inputPassword, inputUsername, handleSignInInternal]); // Dependencies for handleSignIn\n\n  // const handleSignIn = async () => {\n  //   await handleSignInInternal(inputEmail, inputPassword, inputUsername);\n  // };\n\n  const handleSignOut = useCallback(async () => { \n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null); \n    navigate('/'); \n  }, [applyAuthData, navigate]); \n\n  const authContextValue = useMemo(() => ({\n    user,\n    user_id, \n    token,  \n    isLoadingAuth, \n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n  }), [user, user_id, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n\n\n  if (isLoadingAuth) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!token) { \n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n            \n            <div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\" \n                  id=\"user_email\"\n                  value={inputEmail} \n                  onChange={(e) => setInputEmail(e.target.value)} \n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"username\" className=\"auth-label\">\n                  Username:\n                </label>\n                <input\n                type=\"username\"\n                id=\"username\"\n                value={inputUsername}\n                onChange={(e) => setInputUsername(e.target.value)}\n                className=\"auth-input\"\n                placeholder=\"username\"\n                />\n              </div>\n\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"user_password\"\n                  id=\"password\"\n                  value={inputPassword} \n                  onChange={(e) => setInputPassword(e.target.value)} \n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn} \n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp} \n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}