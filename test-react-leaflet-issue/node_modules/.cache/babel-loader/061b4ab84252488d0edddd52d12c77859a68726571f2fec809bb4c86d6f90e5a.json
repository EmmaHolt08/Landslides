{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/MapCoords.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MapContainer, TileLayer, useMap, GeoJSON, CircleMarker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// get query imports (just query the whole database)\n// return the points displayed on the map\n// for loop to get each one on\n// small circle w blue\n// popup wiht info from db\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [38.6263, -90.1751];\nconst zoom = 10;\nfunction MapContent({\n  setMapInstance\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    setMapInstance(map);\n  }, [map, setMapInstance]);\n  return null;\n}\n_s(MapContent, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapContent;\nexport default function MapCoords() {\n  _s2();\n  const [map, setMap] = useState(new Map());\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  useEffect(() => {\n    const fetchPoints = async () => {\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch('http://127.0.0.1:8000/docs#/default/query_data_imports_query_data_imports__get'); // Example API endpoint\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const featureCollection = {\n          type: 'FeatureCollection',\n          features: data.map(item => ({\n            type: 'Feature',\n            properties: {\n              landslideid: item.landslideid,\n              latitude: item.latitude,\n              longitude: item.longitude,\n              lsType: item.lsType,\n              lssource: item.lssource,\n              impact: item.impact,\n              wea13_id: item.wea13_id,\n              wea13_type: item.wea13_type\n            },\n            geometry: item.coords // This should be the actual GeoJSON geometry object\n          }))\n        };\n        setGeoJsonData(featureCollection);\n      } catch (error) {\n        console.error('Error fetching geographical data:', error);\n      }\n    };\n    fetchPoints();\n  }, []);\n  const pointToLayer = (feature, latlng) => {\n    return CircleMarker(latlng, {\n      radius: 5,\n      // Small circle\n      fillColor: '#3388ff',\n      // Blue color\n      color: '#000',\n      weight: 1,\n      opacity: 1,\n      fillOpacity: 0.8\n    });\n  };\n  const onEachFeature = (feature, layer) => {\n    if (feature.properties && feature.properties.name) {\n      layer.bindPopup(`<div>\n          <strong>${feature.properties.name}</strong><br/>\n          ${feature.properties.description || ''}\n        </div>`);\n    }\n  };\n  const displayMap = useMemo(() => /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: zoom,\n    scrollWheelZoom: false,\n    style: {\n      height: '1000px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(MapContent, {\n      setMapInstance: setMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: geoJsonData,\n      pointToLayer: pointToLayer,\n      onEachFeature: onEachFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 11\n  }, this), [geoJsonData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MapContainerWrapper\",\n    children: displayMap\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n}\n_s2(MapCoords, \"HTeLATB8zKLdljATNp68TUyApBg=\");\n_c2 = MapCoords;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContent\");\n$RefreshReg$(_c2, \"MapCoords\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","GeoJSON","CircleMarker","jsxDEV","_jsxDEV","center","zoom","MapContent","setMapInstance","_s","map","_c","MapCoords","_s2","setMap","Map","geoJsonData","setGeoJsonData","fetchPoints","response","fetch","ok","Error","status","data","json","featureCollection","type","features","item","properties","landslideid","latitude","longitude","lsType","lssource","impact","wea13_id","wea13_type","geometry","coords","error","console","pointToLayer","feature","latlng","radius","fillColor","color","weight","opacity","fillOpacity","onEachFeature","layer","name","bindPopup","description","displayMap","scrollWheelZoom","style","height","width","children","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","className","_c2","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/MapCoords.js"],"sourcesContent":["import React, { useState, useEffect, useMemo} from 'react'\nimport { MapContainer, TileLayer, useMap, GeoJSON, CircleMarker} from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css';\n\n\n// get query imports (just query the whole database)\n// return the points displayed on the map\n// for loop to get each one on\n// small circle w blue\n// popup wiht info from db\nconst center = [38.6263, -90.1751]\nconst zoom = 10\n\nfunction MapContent({ setMapInstance }) {\n  const map = useMap(); \n  useEffect(() => {\n    setMapInstance(map); \n  }, [map, setMapInstance]);\n\n  return null;\n}\n\nexport default function MapCoords(){ \n    const [map, setMap] = useState(new Map());\n    const [geoJsonData, setGeoJsonData] = useState(null);\n\n    useEffect(() => {\n    const fetchPoints = async () => {\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch('http://127.0.0.1:8000/docs#/default/query_data_imports_query_data_imports__get'); // Example API endpoint\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        const featureCollection = {\n          type: 'FeatureCollection',\n          features: data.map(item => ({\n            type: 'Feature',\n            properties: {\n              landslideid: item.landslideid,\n              latitude: item.latitude,\n              longitude: item.longitude,\n              lsType: item.lsType,\n              lssource: item.lssource,\n              impact: item.impact,\n              wea13_id: item.wea13_id,\n              wea13_type: item.wea13_type,\n            },\n            geometry: item.coords, // This should be the actual GeoJSON geometry object\n          })),\n        };\n        setGeoJsonData(featureCollection);\n      } catch (error) {\n        console.error('Error fetching geographical data:', error);\n      }\n    };\n\n    fetchPoints();\n  }, []);\n\n      const pointToLayer = (feature, latlng) => {\n    return CircleMarker(latlng, {\n      radius: 5, // Small circle\n      fillColor: '#3388ff', // Blue color\n      color: '#000',\n      weight: 1,\n      opacity: 1,\n      fillOpacity: 0.8,\n    });\n  };\n\n        const onEachFeature = (feature, layer) => {\n    if (feature.properties && feature.properties.name) {\n      layer.bindPopup(\n        `<div>\n          <strong>${feature.properties.name}</strong><br/>\n          ${feature.properties.description || ''}\n        </div>`\n      );\n    }\n  };\n\n      const displayMap = useMemo(\n      () => (\n          <MapContainer\n          center={center}\n          zoom={zoom}\n          scrollWheelZoom={false}\n          style={{ height: '1000px', width: '100%' }}\n          >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n           <MapContent setMapInstance={setMap} />\n\n           {geoJsonData && (\n          <GeoJSON\n            data={geoJsonData}\n            pointToLayer={pointToLayer}\n            onEachFeature={onEachFeature}\n          />\n        )}\n          </MapContainer>\n        ),\n    [geoJsonData],\n    )\n\n    return (\n      <div className = \"MapContainerWrapper\">\n        {displayMap}\n      </div>\n    )\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}