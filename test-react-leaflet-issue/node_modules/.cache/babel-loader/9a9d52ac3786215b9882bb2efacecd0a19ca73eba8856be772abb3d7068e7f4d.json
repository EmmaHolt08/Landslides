{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\n//i broke it all there is no sign in page how did i even do that\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n  const applyAuthData = useCallback((authToken, userData = null) => {\n    setAuthError(''); // Clear any previous errors\n    setMessage(''); // Clear any previous messages\n\n    if (authToken && userData) {\n      localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n      setToken(authToken);\n      // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n      // The 'id' from backend maps to 'uid' in our frontend user object\n      setUser({\n        email: userData.email,\n        uid: userData.id\n      });\n      setUserId(userData.id);\n    } else {\n      // If no token or user data is provided, it means logout or failed auth\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n      setToken(null);\n      setUser(null);\n      setUserId(null);\n    }\n  }, []); // No dependencies needed for this setter function\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n\n    // Only fetch user from token if a token is stored\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      // If no token in local storage, we're done loading auth state (no user logged in)\n      setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]);\n\n  // useEffect(() => {\n  //   const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  //   if (storedToken) {\n\n  //     setIsExplicitlyLoggedIn(true);\n  //     setToken(storedToken);\n  //     fetchUserFromToken(storedToken);\n\n  //   }\n  //   setAuthReady(true); \n  // }, []);\n\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      // No token, so user is not logged in\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n      setIsLoadingAuth(false); // Finished loading if no token\n      return;\n    }\n    try {\n      // IMPORTANT: You need a backend endpoint that validates the token\n      // and returns the user's email and ID based on that token.\n      // I'm assuming '/users/me' for this example.\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          // Send the token in the Authorization header\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Ensure data.id and data.email match what your backend /users/me returns\n        setUser({\n          email: data.email,\n          uid: data.id\n        }); // Assuming backend sends 'id'\n        setUserId(data.id); // Set userId from backend response\n        setToken(authToken); // Keep the token as it's valid\n      } else {\n        // Token might be invalid, expired, or user not found\n        console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n        localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user from token:', error);\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n      setUser(null);\n      setUserId(null);\n      setToken(null);\n    } finally {\n      // This ensures that the loading state is always turned off\n      // once the initial token check is complete, whether successful or not.\n      setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      setIsLoadingAuth(false); // No token found, so auth loading is complete\n    }\n  }, [fetchUserFromToken]);\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email);\n      details.append('password', password);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token,\n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isExplicitlyLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"username\",\n                className: \"auth-label\",\n                children: \"Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"username\",\n                id: \"username\",\n                value: username,\n                onChange: e => setUsername(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your_username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"email\",\n                value: email,\n                onChange: e => setEmail(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                id: \"password\",\n                value: password,\n                onChange: e => setPassword(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"boGcanOnuX0tDD6oFa16T5SmVNM=\");\n_c = AuthPage;\nexport default AuthPage;\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","userId","setUserId","token","setToken","isExplicitlyLoggedIn","setIsExplicitlyLoggedIn","email","setEmail","password","setPassword","username","setUsername","authError","setAuthError","authReady","setAuthReady","message","setMessage","isLoadingAuth","setIsLoadingAuth","API_BASE_URL","applyAuthData","authToken","userData","localStorage","setItem","uid","id","removeItem","storedToken","getItem","fetchUserFromToken","response","fetch","method","headers","ok","data","json","console","error","status","handleSignUp","body","JSON","stringify","access_token","user_id","errorData","detail","handleSignIn","details","URLSearchParams","append","toString","handleSignOut","authContextValue","useMemo","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\n//i broke it all there is no sign in page how did i even do that\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); \n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\nconst applyAuthData = useCallback((authToken, userData = null) => {\n      setAuthError(''); // Clear any previous errors\n      setMessage('');   // Clear any previous messages\n\n      if (authToken && userData) {\n          localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n          setToken(authToken);\n          // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n          // The 'id' from backend maps to 'uid' in our frontend user object\n          setUser({ email: userData.email, uid: userData.id }); \n          setUserId(userData.id); \n      } else {\n          // If no token or user data is provided, it means logout or failed auth\n          localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n          setToken(null);\n          setUser(null);\n          setUserId(null); \n      }\n  }, []); // No dependencies needed for this setter function\n\nuseEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    \n    // Only fetch user from token if a token is stored\n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        // If no token in local storage, we're done loading auth state (no user logged in)\n        setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]);\n  \n\n  // useEffect(() => {\n  //   const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  //   if (storedToken) {\n      \n  //     setIsExplicitlyLoggedIn(true);\n  //     setToken(storedToken);\n  //     fetchUserFromToken(storedToken);\n\n  //   }\n  //   setAuthReady(true); \n  // }, []);\n\n  const fetchUserFromToken = useCallback(async (authToken) => {\n  if (!authToken) {\n        // No token, so user is not logged in\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n        setIsLoadingAuth(false); // Finished loading if no token\n        return;\n    }\n\n    try {\n        // IMPORTANT: You need a backend endpoint that validates the token\n        // and returns the user's email and ID based on that token.\n        // I'm assuming '/users/me' for this example.\n        const response = await fetch(`${API_BASE_URL}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${authToken}`, // Send the token in the Authorization header\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            // Ensure data.id and data.email match what your backend /users/me returns\n            setUser({ email: data.email, uid: data.id }); // Assuming backend sends 'id'\n            setUserId(data.id); // Set userId from backend response\n            setToken(authToken); // Keep the token as it's valid\n        } else {\n            // Token might be invalid, expired, or user not found\n            console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n            localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n            setUser(null);\n            setUserId(null);\n            setToken(null);\n        }\n    } catch (error) {\n        console.error('Error fetching user from token:', error);\n        localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n        setUser(null);\n        setUserId(null);\n        setToken(null);\n    } finally {\n        // This ensures that the loading state is always turned off\n        // once the initial token check is complete, whether successful or not.\n        setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        setIsLoadingAuth(false); // No token found, so auth loading is complete\n    }\n  }, [fetchUserFromToken]);\n\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email); \n      details.append('password', password);\n\n      const response = await fetch(`${API_BASE_URL}/token`, { \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: details.toString(),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n   };\n\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token, \n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password,\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isExplicitlyLoggedIn) {\n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n            \n            <div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"username\" className=\"auth-label\">\n                  Username:\n                </label>\n                <input\n                  type=\"username\"\n                  id=\"username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"your_username\"\n                />\n              </div>\n            \n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn}\n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp}\n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n\n\n\n\n\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;"],"mappings":"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;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}