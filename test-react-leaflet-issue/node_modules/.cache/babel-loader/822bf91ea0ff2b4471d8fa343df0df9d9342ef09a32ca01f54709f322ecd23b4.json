{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      setIsExplicitlyLoggedIn(true);\n      setToken(storedToken);\n      fetchUserFromToken(storedToken);\n    }\n    setAuthReady(true);\n  }, []);\n  const fetchUserFromToken = useCallback(async authToken => {}, []);\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email);\n      details.append('password', password);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({\n          email: data.email,\n          uid: data.user_id\n        });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token,\n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isExplicitlyLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"email\",\n                value: email,\n                onChange: e => setEmail(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                id: \"password\",\n                value: password,\n                onChange: e => setPassword(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"Xjwz6z886WbA4I83bWunn/ZNzTY=\");\n_c = AuthPage;\nexport default AuthPage;\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","userId","setUserId","token","setToken","isExplicitlyLoggedIn","setIsExplicitlyLoggedIn","email","setEmail","password","setPassword","authError","setAuthError","authReady","setAuthReady","message","setMessage","API_BASE_URL","storedToken","localStorage","getItem","fetchUserFromToken","authToken","handleSignUp","response","fetch","method","headers","body","JSON","stringify","ok","data","json","setItem","access_token","uid","user_id","errorData","detail","error","console","handleSignIn","details","URLSearchParams","append","toString","handleSignOut","removeItem","authContextValue","useMemo","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","id","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n//eventually hashed password\n\n//userid only is when sign in not sign up need fixed\n\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); \n  const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [authError, setAuthError] = useState('');\n  const [authReady, setAuthReady] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      \n      setIsExplicitlyLoggedIn(true);\n      setToken(storedToken);\n      fetchUserFromToken(storedToken);\n\n    }\n    setAuthReady(true); \n  }, []);\n\n  const fetchUserFromToken = useCallback(async (authToken) => {\n  }, []);\n\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Account created successfully! You are now logged in.');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n\n  const handleSignIn = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    if (!email || !password) {\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n      const details = new URLSearchParams();\n      details.append('username', email); \n      details.append('password', password);\n\n      const response = await fetch(`${API_BASE_URL}/token`, { \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: details.toString(),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n        setToken(data.access_token);\n        setUser({ email: data.email, uid: data.user_id });\n        setUserId(data.user_id);\n        setIsExplicitlyLoggedIn(true);\n        setMessage('Logged in successfully!');\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        setIsExplicitlyLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n   };\n\n  const handleSignOut = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!authReady) {\n      setAuthError('Authentication not ready. Please wait.');\n      return;\n    }\n    setUser(null);\n    setUserId(null);\n    setToken(null);\n    setIsExplicitlyLoggedIn(false);\n    setMessage('Logged out successfully.');\n\n    localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n  };\n\n  const authContextValue = React.useMemo(() => ({\n    user,\n    userId,\n    token, \n    authReady,\n    isExplicitlyLoggedIn,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    setEmail,\n    setPassword,\n    email,\n    password,\n  }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n  if (!authReady) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isExplicitlyLoggedIn) {\n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n\n            <div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn}\n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp}\n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n//Old auth page\n// import React, { useState, useEffect, createContext } from 'react';\n\n// //NOTES: change from local storage to db storage\n// //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // \"Error: [object Object]\"\n\n// // Define keys for localStorage.\n// const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//  // const [user, setUser] = useState(null);\n//   const [userID, setUserID] = useState(null);\n//  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [user, setUser] = useState(() => {\n//     try {\n//       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n//       return storedUser ? JSON.parse(storedUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   });\n\n//   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n//     try {\n//       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//       return storedLoginStatus === 'true';\n//     } catch (error) {\n//       return false;\n//     }\n//   });\n\n//   const [registeredUsers, setRegisteredUsers] = useState(() => {\n//     try {\n//       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n//       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n//     } catch (error) {\n//       return {};\n//     }\n//   });\n\n//   // const [email, setEmail] = useState('');\n//   // const [password, setPassword] = useState('');\n//   // const [authError, setAuthError] = useState('');\n//   // const [authReady, setAuthReady] = useState(false);\n//   // const [message, setMessage] = useState('');\n\n//   useEffect(() => {\n//     setAuthReady(true);\n//     if (isExplicitlyLoggedIn && user) {\n//       setMessage(`Welcome back, ${user.email}!`);\n//     } else {\n//       setMessage('Please log in or sign up to access the application.');\n//     }\n//   }, []);\n\n//   // useEffect(() => {\n//   //   if (user) {\n//   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n//   //   } else {\n//   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//   //   }\n//   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n//   // }, [user, isExplicitlyLoggedIn]);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n//   // }, [registeredUsers]);\n\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     if (registeredUsers[email]) {\n//       setAuthError('An account with this email already exists. Please sign in.');\n//       return;\n//     }\n\n//     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n//     const newUserProfile = { email: email, uid: newUid };\n\n//     setRegisteredUsers(prev => ({\n//       ...prev,\n//       [email]: { password: password, uid: newUid }\n//     }));\n\n//     setUser(newUserProfile);\n//     setUserId(newUid);\n//     setIsExplicitlyLoggedIn(true);\n//     setMessage('Account created successfully! You are now logged in.');\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     const storedUser = registeredUsers[email];\n\n//     if (!storedUser) {\n//       setAuthError('No account found with this email/password. Please sign up.');\n//       setIsExplicitlyLoggedIn(false);\n//       return;\n//     }\n\n//     if (storedUser.password === password) {\n//       const loggedInUser = { email: email, uid: storedUser.uid };\n//       setUser(loggedInUser);\n//       setUserID(loggedInUser.uid);\n//       setIsExplicitlyLoggedIn(true);\n//       setMessage('Logged in successfully!');\n//     } else {\n//       setAuthError('Invalid email or password.');\n//       setIsExplicitlyLoggedIn(false);\n//     }\n//   };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n//     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n//   };\n\n//   const authContextValue = {\n//     user,\n//     userId,\n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   };\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;"],"mappings":"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C,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc,CAAC;EAE3B;EAEA,oBACE9D,OAAA,CAACE,WAAW,CAAC6D,QAAQ;IAACC,KAAK,EAAER,gBAAiB;IAAApD,QAAA,EAC3CA;EAAQ;IAAAuD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzD,EAAA,CAxOIF,QAAQ;AAAAuE,EAAA,GAARvE,QAAQ;AA0Od,eAAeA,QAAQ;;AAEvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}