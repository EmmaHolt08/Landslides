{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n// Component renamed to AuthProvider in previous conceptual steps for clarity,\n// but keeping AuthPage here as per your request to not rename the file.\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n\n  // --- CHANGED: Removed isExplicitlyLoggedIn and authReady states.\n  // --- NEW: This state manages the loading during the initial authentication check on page load.\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  // --- CHANGED: Renamed local states for form inputs to avoid conflict with context email/password.\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  // --- REMOVED: username state as it's not used by your backend /token endpoint.\n  // const [username, setUsername] = useState(''); \n\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n\n  // --- NEW FUNCTION: Centralized helper to apply authentication data consistently ---\n  // This is crucial for correctly setting/clearing all auth-related states (token, user, userId)\n  // and managing localStorage in one place.\n  const applyAuthData = useCallback((authToken, userData = null) => {\n    setAuthError(''); // Clear any previous errors\n    setMessage(''); // Clear any previous messages\n\n    if (authToken && userData) {\n      localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n      setToken(authToken);\n      // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n      // The 'id' from backend maps to 'uid' in our frontend user object\n      setUser({\n        email: userData.email,\n        uid: userData.id\n      });\n      setUserId(userData.id);\n    } else {\n      // If no token or user data is provided, it means logout or failed auth\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n      setToken(null);\n      setUser(null);\n      setUserId(null);\n    }\n  }, []); // No dependencies needed for this setter function\n\n  // --- CHANGED: The primary useEffect for initial component mount/load ---\n  // This useEffect now correctly checks for a stored token and triggers\n  // fetchUserFromToken only if needed, managing isLoadingAuth.\n  // --- REMOVED: The old useEffect that set isExplicitlyLoggedIn and authReady.\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n\n    // Only fetch user from token if a token is stored\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      // If no token in local storage, we're done loading auth state (no user logged in)\n      setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]); // fetchUserFromToken is a dependency\n\n  // --- CHANGED: fetchUserFromToken now uses applyAuthData for state management ---\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      applyAuthData(null); // Clear auth data if no token\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // CRITICAL: Ensure 'data.id' and 'data.email' exist and are strings from backend response\n        if (data && typeof data.id === 'string' && typeof data.email === 'string') {\n          applyAuthData(authToken, {\n            id: data.id,\n            email: data.email\n          }); // --- CHANGED: Uses applyAuthData\n        } else {\n          console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n          applyAuthData(null); // --- CHANGED: Uses applyAuthData\n        }\n      } else {\n        const errorData = await response.json();\n        console.error(\"DEBUG: /users/me fetch failed (response.ok === false). Status:\", response.status, \"Details:\", errorData);\n        applyAuthData(null); // --- CHANGED: Uses applyAuthData\n      }\n    } catch (error) {\n      console.error('DEBUG: Network error during /users/me fetch:', error);\n      applyAuthData(null); // --- CHANGED: Uses applyAuthData\n    } finally {\n      setIsLoadingAuth(false); // Authentication loading is now complete\n    }\n  }, [API_BASE_URL, applyAuthData]);\n\n  // --- CHANGED: handleSignUp now calls handleSignInInternal to get a token ---\n  // It no longer directly sets token/user from the /register response.\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    // --- REMOVED: if (!authReady) check is no longer needed.\n    if (!inputEmail || !inputPassword) {\n      // --- CHANGED: Uses inputEmail/inputPassword\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: inputEmail,\n          password: inputPassword\n        }) // --- CHANGED: Uses inputEmail/inputPassword\n      });\n      if (response.ok) {\n        // Registration successful. Now, immediately sign them in to get a token.\n        const signInSuccess = await handleSignInInternal(inputEmail, inputPassword); // --- CHANGED: Calls internal sign-in\n        if (signInSuccess) {\n          setMessage('Account created successfully! You are now logged in.');\n          // --- NEW: Clear form fields after successful sign up and auto-login.\n          setInputEmail('');\n          setInputPassword('');\n        } else {\n          setAuthError('Account created, but automatic login failed. Please sign in manually.');\n        }\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n\n  // --- NEW FUNCTION: Internal helper for Sign In logic ---\n  // This function performs the actual sign-in API call and state update.\n  const handleSignInInternal = async (signInEmail, signInPassword) => {\n    setAuthError('');\n    setMessage('');\n    if (!signInEmail || !signInPassword) {\n      setAuthError('Please enter both email and password.');\n      return false;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('username', signInEmail);\n      details.append('password', signInPassword);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // CRITICAL: Ensure 'data.user_id' matches backend /token response\n        applyAuthData(data.access_token, {\n          id: data.user_id,\n          email: data.email\n        }); // --- CHANGED: Uses applyAuthData\n        setMessage('Logged in successfully!');\n        // --- NEW: Clear form fields after successful login\n        setInputEmail('');\n        setInputPassword('');\n        return true; // Indicate success\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email or password.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  };\n\n  // --- CHANGED: Public handleSignIn calls the internal helper ---\n  const handleSignIn = async () => {\n    await handleSignInInternal(inputEmail, inputPassword); // --- CHANGED: Calls internal helper\n  };\n\n  // --- CHANGED: handleSignOut now uses applyAuthData to clear state ---\n  const handleSignOut = useCallback(async () => {\n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null); // --- CHANGED: Uses applyAuthData\n  }, [applyAuthData]);\n\n  // --- CHANGED: authContextValue dependencies and exposed properties ---\n  // useMemo ensures context only re-renders consumers when its value actually changes.\n  const authContextValue = useMemo(() => ({\n    user,\n    userId,\n    token,\n    isLoadingAuth,\n    // --- EXPOSED: Loading state is crucial for App.js\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut\n    // --- REMOVED: email/password states are now local to the form rendering logic, not exposed via context.\n    // email,\n    // password,\n    // --- REMOVED: authReady and isExplicitlyLoggedIn are removed.\n    // authReady,\n    // isExplicitlyLoggedIn,\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n\n  // --- CHANGED: Render Logic for AuthPage ---\n  // Now uses isLoadingAuth and 'token' (instead of isExplicitlyLoggedIn/authReady) to control display.\n\n  // Show a loading screen while authentication status is being determined\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If not authenticated (token is null/undefined) AND not loading, render the Login/Signup Form.\n  // This will be the first thing the user sees if they are not logged in.\n  if (!token) {\n    // --- CHANGED: Condition uses 'token' directly\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"email\",\n                value: inputEmail // --- CHANGED: Uses local inputEmail state\n                ,\n                onChange: e => setInputEmail(e.target.value) // --- CHANGED: Updates local inputEmail state\n                ,\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                id: \"password\",\n                value: inputPassword // --- CHANGED: Uses local inputPassword state\n                ,\n                onChange: e => setInputPassword(e.target.value) // --- CHANGED: Updates local inputPassword state\n                ,\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If authenticated (token is present and isLoadingAuth is false), render children\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"kHDKA5zA+bKrUzV4Bw+1hXX/vKE=\");\n_c = AuthPage;\nexport default AuthPage;\n\n// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n// const applyAuthData = useCallback((authToken, userData = null) => {\n//       setAuthError(''); // Clear any previous errors\n//       setMessage('');   // Clear any previous messages\n\n//       if (authToken && userData) {\n//           localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n//           setToken(authToken);\n//           // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n//           // The 'id' from backend maps to 'uid' in our frontend user object\n//           setUser({ email: userData.email, uid: userData.id }); \n//           setUserId(userData.id); \n//       } else {\n//           // If no token or user data is provided, it means logout or failed auth\n//           localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//           setToken(null);\n//           setUser(null);\n//           setUserId(null); \n//       }\n//   }, []); // No dependencies needed for this setter function\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n\n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   if (!authToken) {\n//         // No token, so user is not logged in\n//         setUser(null);\n//         setUserId(null);\n//         setToken(null);\n//         setIsLoadingAuth(false); // Finished loading if no token\n//         return;\n//     }\n\n//     try {\n//         // IMPORTANT: You need a backend endpoint that validates the token\n//         // and returns the user's email and ID based on that token.\n//         // I'm assuming '/users/me' for this example.\n//         const response = await fetch(`${API_BASE_URL}/users/me`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `Bearer ${authToken}`, // Send the token in the Authorization header\n//                 'Content-Type': 'application/json',\n//             },\n//         });\n\n//         if (response.ok) {\n//             const data = await response.json();\n//             // Ensure data.id and data.email match what your backend /users/me returns\n//             setUser({ email: data.email, uid: data.id }); // Assuming backend sends 'id'\n//             setUserId(data.id); // Set userId from backend response\n//             setToken(authToken); // Keep the token as it's valid\n//         } else {\n//             // Token might be invalid, expired, or user not found\n//             console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n//             localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n//             setUser(null);\n//             setUserId(null);\n//             setToken(null);\n//         }\n//     } catch (error) {\n//         console.error('Error fetching user from token:', error);\n//         localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n//         setUser(null);\n//         setUserId(null);\n//         setToken(null);\n//     } finally {\n//         // This ensures that the loading state is always turned off\n//         // once the initial token check is complete, whether successful or not.\n//         setIsLoadingAuth(false);\n//     }\n//   }, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n//         fetchUserFromToken(storedToken);\n//     } else {\n//         setIsLoadingAuth(false); // No token found, so auth loading is complete\n//     }\n//   }, [fetchUserFromToken]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n\n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Username:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","useMemo","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","userId","setUserId","token","setToken","isLoadingAuth","setIsLoadingAuth","inputEmail","setInputEmail","inputPassword","setInputPassword","authError","setAuthError","message","setMessage","API_BASE_URL","applyAuthData","authToken","userData","localStorage","setItem","email","uid","id","removeItem","storedToken","getItem","fetchUserFromToken","response","fetch","method","headers","ok","data","json","console","error","errorData","status","handleSignUp","body","JSON","stringify","password","signInSuccess","handleSignInInternal","detail","signInEmail","signInPassword","details","URLSearchParams","append","toString","access_token","user_id","handleSignIn","handleSignOut","authContextValue","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\n\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\n// Component renamed to AuthProvider in previous conceptual steps for clarity,\n// but keeping AuthPage here as per your request to not rename the file.\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); \n\n  // --- CHANGED: Removed isExplicitlyLoggedIn and authReady states.\n  // --- NEW: This state manages the loading during the initial authentication check on page load.\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true); \n\n  // --- CHANGED: Renamed local states for form inputs to avoid conflict with context email/password.\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  // --- REMOVED: username state as it's not used by your backend /token endpoint.\n  // const [username, setUsername] = useState(''); \n\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  // --- NEW FUNCTION: Centralized helper to apply authentication data consistently ---\n  // This is crucial for correctly setting/clearing all auth-related states (token, user, userId)\n  // and managing localStorage in one place.\n  const applyAuthData = useCallback((authToken, userData = null) => {\n      setAuthError(''); // Clear any previous errors\n      setMessage('');   // Clear any previous messages\n\n      if (authToken && userData) {\n          localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n          setToken(authToken);\n          // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n          // The 'id' from backend maps to 'uid' in our frontend user object\n          setUser({ email: userData.email, uid: userData.id }); \n          setUserId(userData.id); \n      } else {\n          // If no token or user data is provided, it means logout or failed auth\n          localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n          setToken(null);\n          setUser(null);\n          setUserId(null); \n      }\n  }, []); // No dependencies needed for this setter function\n\n\n  // --- CHANGED: The primary useEffect for initial component mount/load ---\n  // This useEffect now correctly checks for a stored token and triggers\n  // fetchUserFromToken only if needed, managing isLoadingAuth.\n  // --- REMOVED: The old useEffect that set isExplicitlyLoggedIn and authReady.\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    \n    // Only fetch user from token if a token is stored\n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        // If no token in local storage, we're done loading auth state (no user logged in)\n        setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]); // fetchUserFromToken is a dependency\n\n\n  // --- CHANGED: fetchUserFromToken now uses applyAuthData for state management ---\n  const fetchUserFromToken = useCallback(async (authToken) => {\n      if (!authToken) {\n          applyAuthData(null); // Clear auth data if no token\n          return;\n      }\n\n      try {\n          const response = await fetch(`${API_BASE_URL}/users/me`, {\n              method: 'GET',\n              headers: {\n                  'Authorization': `Bearer ${authToken}`,\n                  'Content-Type': 'application/json',\n              },\n          });\n\n          if (response.ok) {\n              const data = await response.json(); \n              // CRITICAL: Ensure 'data.id' and 'data.email' exist and are strings from backend response\n              if (data && typeof data.id === 'string' && typeof data.email === 'string') {\n                  applyAuthData(authToken, { id: data.id, email: data.email }); // --- CHANGED: Uses applyAuthData\n              } else {\n                  console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n                  applyAuthData(null); // --- CHANGED: Uses applyAuthData\n              }\n          } else {\n              const errorData = await response.json();\n              console.error(\"DEBUG: /users/me fetch failed (response.ok === false). Status:\", response.status, \"Details:\", errorData);\n              applyAuthData(null); // --- CHANGED: Uses applyAuthData\n          }\n      } catch (error) {\n          console.error('DEBUG: Network error during /users/me fetch:', error);\n          applyAuthData(null); // --- CHANGED: Uses applyAuthData\n      } finally {\n          setIsLoadingAuth(false); // Authentication loading is now complete\n      }\n  }, [API_BASE_URL, applyAuthData]); \n\n\n  // --- CHANGED: handleSignUp now calls handleSignInInternal to get a token ---\n  // It no longer directly sets token/user from the /register response.\n  const handleSignUp = async () => { \n    setAuthError('');\n    setMessage('');\n    // --- REMOVED: if (!authReady) check is no longer needed.\n    if (!inputEmail || !inputPassword) { // --- CHANGED: Uses inputEmail/inputPassword\n      setAuthError('Please enter both email and password.');\n      return;\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/register`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email: inputEmail, password: inputPassword }), // --- CHANGED: Uses inputEmail/inputPassword\n        });\n\n        if (response.ok) {\n            // Registration successful. Now, immediately sign them in to get a token.\n            const signInSuccess = await handleSignInInternal(inputEmail, inputPassword); // --- CHANGED: Calls internal sign-in\n            if (signInSuccess) {\n                setMessage('Account created successfully! You are now logged in.');\n                // --- NEW: Clear form fields after successful sign up and auto-login.\n                setInputEmail('');\n                setInputPassword('');\n            } else {\n                setAuthError('Account created, but automatic login failed. Please sign in manually.');\n            }\n        } else {\n            const errorData = await response.json();\n            setAuthError(errorData.detail || 'Sign up failed.');\n        }\n    } catch (error) {\n        console.error('Sign up network error:', error);\n        setAuthError('Network error. Please try again.');\n    }\n  };\n\n  // --- NEW FUNCTION: Internal helper for Sign In logic ---\n  // This function performs the actual sign-in API call and state update.\n  const handleSignInInternal = async (signInEmail, signInPassword) => { \n    setAuthError('');\n    setMessage('');\n    if (!signInEmail || !signInPassword) {\n      setAuthError('Please enter both email and password.');\n      return false; \n    }\n\n    try {\n        const details = new URLSearchParams();\n        details.append('username', signInEmail); \n        details.append('password', signInPassword);\n\n        const response = await fetch(`${API_BASE_URL}/token`, { \n            method: 'POST',\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            body: details.toString(),\n        });\n\n        if (response.ok) {\n            const data = await response.json(); \n            // CRITICAL: Ensure 'data.user_id' matches backend /token response\n            applyAuthData(data.access_token, { id: data.user_id, email: data.email }); // --- CHANGED: Uses applyAuthData\n            setMessage('Logged in successfully!');\n            // --- NEW: Clear form fields after successful login\n            setInputEmail('');\n            setInputPassword('');\n            return true; // Indicate success\n        } else {\n            const errorData = await response.json();\n            setAuthError(errorData.detail || 'Invalid email or password.');\n            return false; \n        }\n    } catch (error) {\n        console.error('Sign in network error:', error);\n        setAuthError('Network error. Please try again.');\n        return false; \n    }\n  };\n\n  // --- CHANGED: Public handleSignIn calls the internal helper ---\n  const handleSignIn = async () => {\n    await handleSignInInternal(inputEmail, inputPassword); // --- CHANGED: Calls internal helper\n  };\n\n  // --- CHANGED: handleSignOut now uses applyAuthData to clear state ---\n  const handleSignOut = useCallback(async () => { \n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null); // --- CHANGED: Uses applyAuthData\n  }, [applyAuthData]);\n\n  // --- CHANGED: authContextValue dependencies and exposed properties ---\n  // useMemo ensures context only re-renders consumers when its value actually changes.\n  const authContextValue = useMemo(() => ({\n    user,\n    userId, \n    token,  \n    isLoadingAuth, // --- EXPOSED: Loading state is crucial for App.js\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n    // --- REMOVED: email/password states are now local to the form rendering logic, not exposed via context.\n    // email,\n    // password,\n    // --- REMOVED: authReady and isExplicitlyLoggedIn are removed.\n    // authReady,\n    // isExplicitlyLoggedIn,\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n\n\n  // --- CHANGED: Render Logic for AuthPage ---\n  // Now uses isLoadingAuth and 'token' (instead of isExplicitlyLoggedIn/authReady) to control display.\n\n  // Show a loading screen while authentication status is being determined\n  if (isLoadingAuth) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated (token is null/undefined) AND not loading, render the Login/Signup Form.\n  // This will be the first thing the user sees if they are not logged in.\n  if (!token) { // --- CHANGED: Condition uses 'token' directly\n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n            \n            {/* Login Form Inputs - now part of AuthPage's render */}\n            <div>\n              {/* --- REMOVED: 'username' input field entirely. */}\n              {/* <div className=\"auth-input-group\">\n                <label htmlFor=\"username\" className=\"auth-label\">Username:</label>\n                <input type=\"username\" id=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"auth-input\" placeholder=\"your_username\"/>\n              </div> */}\n            \n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\" \n                  id=\"email\"\n                  value={inputEmail} // --- CHANGED: Uses local inputEmail state\n                  onChange={(e) => setInputEmail(e.target.value)} // --- CHANGED: Updates local inputEmail state\n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  value={inputPassword} // --- CHANGED: Uses local inputPassword state\n                  onChange={(e) => setInputPassword(e.target.value)} // --- CHANGED: Updates local inputPassword state\n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn} \n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp} \n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  // If authenticated (token is present and isLoadingAuth is false), render children\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n\n\n\n\n// import React, { useState, useEffect, createContext, useCallback } from 'react';\n\n// //eventually hashed password\n\n// //userid only is when sign in not sign up need fixed\n// //i broke it all there is no sign in page how did i even do that\n// const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\n// export const AuthContext = createContext(null);\n\n// const AuthPage = ({ children }) => {\n//   const [user, setUser] = useState(null); \n//   const [userId, setUserId] = useState(null);\n//   const [token, setToken] = useState(null); \n//   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [authError, setAuthError] = useState('');\n//   const [authReady, setAuthReady] = useState(false);\n//   const [message, setMessage] = useState('');\n\n//   const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n//   const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n// const applyAuthData = useCallback((authToken, userData = null) => {\n//       setAuthError(''); // Clear any previous errors\n//       setMessage('');   // Clear any previous messages\n\n//       if (authToken && userData) {\n//           localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n//           setToken(authToken);\n//           // Ensure userData has 'email' and 'id' keys matching your backend's UserResponse\n//           // The 'id' from backend maps to 'uid' in our frontend user object\n//           setUser({ email: userData.email, uid: userData.id }); \n//           setUserId(userData.id); \n//       } else {\n//           // If no token or user data is provided, it means logout or failed auth\n//           localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//           setToken(null);\n//           setUser(null);\n//           setUserId(null); \n//       }\n//   }, []); // No dependencies needed for this setter function\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n      \n//       setIsExplicitlyLoggedIn(true);\n//       setToken(storedToken);\n//       fetchUserFromToken(storedToken);\n\n//     }\n//     setAuthReady(true); \n//   }, []);\n\n//   const fetchUserFromToken = useCallback(async (authToken) => {\n//   if (!authToken) {\n//         // No token, so user is not logged in\n//         setUser(null);\n//         setUserId(null);\n//         setToken(null);\n//         setIsLoadingAuth(false); // Finished loading if no token\n//         return;\n//     }\n\n//     try {\n//         // IMPORTANT: You need a backend endpoint that validates the token\n//         // and returns the user's email and ID based on that token.\n//         // I'm assuming '/users/me' for this example.\n//         const response = await fetch(`${API_BASE_URL}/users/me`, {\n//             method: 'GET',\n//             headers: {\n//                 'Authorization': `Bearer ${authToken}`, // Send the token in the Authorization header\n//                 'Content-Type': 'application/json',\n//             },\n//         });\n\n//         if (response.ok) {\n//             const data = await response.json();\n//             // Ensure data.id and data.email match what your backend /users/me returns\n//             setUser({ email: data.email, uid: data.id }); // Assuming backend sends 'id'\n//             setUserId(data.id); // Set userId from backend response\n//             setToken(authToken); // Keep the token as it's valid\n//         } else {\n//             // Token might be invalid, expired, or user not found\n//             console.error(\"Token validation failed or user data could not be retrieved. Status:\", response.status);\n//             localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear invalid token\n//             setUser(null);\n//             setUserId(null);\n//             setToken(null);\n//         }\n//     } catch (error) {\n//         console.error('Error fetching user from token:', error);\n//         localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY); // Clear token on network error\n//         setUser(null);\n//         setUserId(null);\n//         setToken(null);\n//     } finally {\n//         // This ensures that the loading state is always turned off\n//         // once the initial token check is complete, whether successful or not.\n//         setIsLoadingAuth(false);\n//     }\n//   }, [API_BASE_URL]); // API_BASE_URL should be in dependencies\n\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//     if (storedToken) {\n//         fetchUserFromToken(storedToken);\n//     } else {\n//         setIsLoadingAuth(false); // No token found, so auth loading is complete\n//     }\n//   }, [fetchUserFromToken]);\n\n//   const handleSignUp = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`${API_BASE_URL}/register`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Account created successfully! You are now logged in.');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Sign up failed.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign up network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//   };\n\n//   const handleSignIn = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     if (!email || !password) {\n//       setAuthError('Please enter both email and password.');\n//       return;\n//     }\n\n//     try {\n//       const details = new URLSearchParams();\n//       details.append('username', email); \n//       details.append('password', password);\n\n//       const response = await fetch(`${API_BASE_URL}/token`, { \n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/x-www-form-urlencoded',\n//         },\n//         body: details.toString(),\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, data.access_token);\n//         setToken(data.access_token);\n//         setUser({ email: data.email, uid: data.user_id });\n//         setUserId(data.user_id);\n//         setIsExplicitlyLoggedIn(true);\n//         setMessage('Logged in successfully!');\n//       } else {\n//         const errorData = await response.json();\n//         setAuthError(errorData.detail || 'Invalid email or password.');\n//         setIsExplicitlyLoggedIn(false);\n//       }\n//     } catch (error) {\n//       console.error('Sign in network error:', error);\n//       setAuthError('Network error. Please try again.');\n//     }\n//    };\n\n//   const handleSignOut = async () => {\n//     setAuthError('');\n//     setMessage('');\n//     if (!authReady) {\n//       setAuthError('Authentication not ready. Please wait.');\n//       return;\n//     }\n//     setUser(null);\n//     setUserId(null);\n//     setToken(null);\n//     setIsExplicitlyLoggedIn(false);\n//     setMessage('Logged out successfully.');\n\n//     localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n//   };\n\n//   const authContextValue = React.useMemo(() => ({\n//     user,\n//     userId,\n//     token, \n//     authReady,\n//     isExplicitlyLoggedIn,\n//     authError,\n//     message,\n//     handleSignIn,\n//     handleSignUp,\n//     handleSignOut,\n//     setEmail,\n//     setPassword,\n//     email,\n//     password,\n//   }), [user, userId, token, authReady, isExplicitlyLoggedIn, authError, message, email, password]); // Add all dependencies\n\n//   if (!authReady) {\n//     return (\n//       <div className=\"auth-loading-container\">\n//         <div className=\"auth-loading-box\">\n//           <p className=\"auth-loading-text\">Loading authentication...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (!isExplicitlyLoggedIn) {\n//     return (\n//       <AuthContext.Provider value={authContextValue}>\n//         <div className=\"auth-page-container\">\n//           <div className=\"auth-form-card\">\n//             <h2 className=\"auth-form-title\">\n//               Landslide Report Login\n//             </h2>\n\n//             {authError && (\n//               <div className=\"auth-error-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Error:</strong>\n//                 <span className=\"auth-message-span\">{authError}</span>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"auth-info-message\" role=\"alert\">\n//                 <strong className=\"auth-message-strong\">Info:</strong>\n//                 <span className=\"auth-message-span\">{message}</span>\n//               </div>\n//             )}\n            \n//             <div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"username\" className=\"auth-label\">\n//                   Username:\n//                 </label>\n//                 <input\n//                   type=\"username\"\n//                   id=\"username\"\n//                   value={username}\n//                   onChange={(e) => setUsername(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your_username\"\n//                 />\n//               </div>\n            \n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"email\" className=\"auth-label\">\n//                   Email:\n//                 </label>\n//                 <input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"your.email@example.com\"\n//                 />\n//               </div>\n//               <div className=\"auth-input-group\">\n//                 <label htmlFor=\"password\" className=\"auth-label\">\n//                   Password:\n//                 </label>\n//                 <input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   className=\"auth-input\"\n//                   placeholder=\"••••••••\"\n//                 />\n//               </div>\n\n//               <div className=\"auth-button-group\">\n//                 <button\n//                   onClick={handleSignIn}\n//                   className=\"auth-button auth-button-primary\"\n//                 >\n//                   Sign In\n//                 </button>\n//                 <button\n//                   onClick={handleSignUp}\n//                   className=\"auth-button auth-button-secondary\"\n//                 >\n//                   Sign Up\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AuthContext.Provider>\n//     );\n//   }\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthPage;\n\n\n\n\n\n\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}