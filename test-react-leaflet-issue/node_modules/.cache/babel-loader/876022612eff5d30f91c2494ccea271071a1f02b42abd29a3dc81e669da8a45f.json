{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/MapCoords.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MapContainer, TileLayer, useMap, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [38.6263, -96.1751];\nconst zoom = 4;\n\n//makes the map\nfunction MapContent({\n  setMapInstance\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    setMapInstance(map);\n  }, [map, setMapInstance]);\n  return null;\n}\n_s(MapContent, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapContent;\nexport default function MapCoords() {\n  _s2();\n  const [map, setMap] = useState(null);\n  const [geoJsonData, setGeoJsonData] = useState(null);\n\n  //gets points from database\n  useEffect(() => {\n    const fetchPoints = async () => {\n      try {\n        const apiUrl = 'http://127.0.0.1:8000/query-data-imports/';\n        const response = await fetch(apiUrl);\n\n        // if (!response.ok) {\n        //   throw new Error(`HTTP error! status: ${response.status}`);\n        // }\n        const data = await response.json();\n        const processedData = data.map(item => {\n          //console.log(\"Before parsing, item.geometry type:\", typeof item.geometry, \"value:\", item.geometry); // DEBUG LOG 1\n          let parsedGeometry = item.geometry;\n          if (typeof item.geometry === 'string') {\n            try {\n              parsedGeometry = JSON.parse(item.geometry);\n              //console.log(\"After parsing, parsedGeometry type:\", typeof parsedGeometry, \"value:\", parsedGeometry); // DEBUG LOG 2\n            } catch (e) {\n              console.error(\"Failed to parse geometry string for map:\", e, item.geometry);\n              parsedGeometry = null; // Set to null if parsing fails\n            }\n          }\n          return {\n            ...item,\n            geometry: parsedGeometry\n          };\n        });\n\n        //for the popup\n        const featureCollection = {\n          type: 'FeatureCollection',\n          features: data.map(item => ({\n            type: 'Feature',\n            properties: {\n              landslideid: item.landslideID,\n              latitude: item.latitude,\n              longitude: item.longitude,\n              lsType: item.lsType,\n              lssource: item.lsSource,\n              impact: item.impact,\n              wea13_id: item.wea13_id,\n              wea13_type: item.wea13_type\n            },\n            geometry: item.geometry\n          }))\n        };\n        setGeoJsonData(featureCollection);\n      } catch (error) {\n        console.error('Error fetching geographical data:', error);\n      }\n    };\n    fetchPoints();\n  }, []);\n\n  // blue circles\n  const pointToLayer = (feature, latlng) => {\n    return L.circleMarker(latlng, {\n      radius: 5,\n      fillColor: '#53698c',\n      color: '#000',\n      weight: 1,\n      opacity: 1,\n      fillOpacity: 0.8\n    });\n  };\n  const onEachFeature = (feature, layer) => {\n    if (feature.properties) {\n      const props = feature.properties;\n      layer.bindPopup(`<div>\n          <strong>Landslide ID:</strong> ${props.landslideid}<br/>\n          <strong>Type:</strong> ${props.lsType}<br/>\n          <strong>Source:</strong> ${props.lssource}<br/>\n          <strong>Impact:</strong> ${props.impact}<br/>\n          <strong>Latitude:</strong> ${props.latitude}<br/>\n          <strong>Longitude:</strong> ${props.longitude}<br/>\n          ${props.wea13_id ? `<strong>WEA13 ID:</strong> ${props.wea13_id}<br/>` : ''}\n          ${props.wea13_type ? `<strong>WEA13 Type:</strong> ${props.wea13_type}<br/>` : ''}\n        </div>`);\n    }\n  };\n  const displayMap = useMemo(() => /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: zoom,\n    scrollWheelZoom: false,\n    style: {\n      height: '85vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(MapContent, {\n      setMapInstance: setMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 12\n    }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: geoJsonData,\n      pointToLayer: pointToLayer,\n      onEachFeature: onEachFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 11\n  }, this), [geoJsonData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MapContainerWrapper\",\n    children: displayMap\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }, this);\n}\n_s2(MapCoords, \"kkOIgTNKSICbFWC0VUbysbuExzQ=\");\n_c2 = MapCoords;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContent\");\n$RefreshReg$(_c2, \"MapCoords\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","GeoJSON","L","jsxDEV","_jsxDEV","center","zoom","MapContent","setMapInstance","_s","map","_c","MapCoords","_s2","setMap","geoJsonData","setGeoJsonData","fetchPoints","apiUrl","response","fetch","data","json","processedData","item","parsedGeometry","geometry","JSON","parse","e","console","error","featureCollection","type","features","properties","landslideid","landslideID","latitude","longitude","lsType","lssource","lsSource","impact","wea13_id","wea13_type","pointToLayer","feature","latlng","circleMarker","radius","fillColor","color","weight","opacity","fillOpacity","onEachFeature","layer","props","bindPopup","displayMap","scrollWheelZoom","style","height","width","children","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","className","_c2","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/MapCoords.js"],"sourcesContent":["import React, { useState, useEffect, useMemo} from 'react'\nimport { MapContainer, TileLayer, useMap, GeoJSON} from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\nconst center = [38.6263, -96.1751]\nconst zoom = 4\n\n//makes the map\nfunction MapContent({ setMapInstance }) {\n  const map = useMap(); \n  useEffect(() => {\n    setMapInstance(map); \n  }, [map, setMapInstance]);\n\n  return null;\n}\n\nexport default function MapCoords(){ \n    const [map, setMap] = useState(null);\n    const [geoJsonData, setGeoJsonData] = useState(null);\n\n    //gets points from database\n    useEffect(() => {\n    const fetchPoints = async () => {\n      try {\n        const apiUrl = 'http://127.0.0.1:8000/query-data-imports/';\n        const response = await fetch(apiUrl);\n\n        // if (!response.ok) {\n        //   throw new Error(`HTTP error! status: ${response.status}`);\n        // }\n        const data = await response.json();\n\n        const processedData = data.map(item => {\n          //console.log(\"Before parsing, item.geometry type:\", typeof item.geometry, \"value:\", item.geometry); // DEBUG LOG 1\n          let parsedGeometry = item.geometry;\n          if (typeof item.geometry === 'string') {\n            try {\n              parsedGeometry = JSON.parse(item.geometry);\n              //console.log(\"After parsing, parsedGeometry type:\", typeof parsedGeometry, \"value:\", parsedGeometry); // DEBUG LOG 2\n            } catch (e) {\n              console.error(\"Failed to parse geometry string for map:\", e, item.geometry);\n              parsedGeometry = null; // Set to null if parsing fails\n            }\n          }\n          return { ...item, geometry: parsedGeometry };\n        });\n\n        //for the popup\n        const featureCollection = {\n          type: 'FeatureCollection',\n          features: data.map(item => ({\n            type: 'Feature',\n            properties: {\n              landslideid: item.landslideID,\n              latitude: item.latitude,\n              longitude: item.longitude,\n              lsType: item.lsType,\n              lssource: item.lsSource,\n              impact: item.impact,\n              wea13_id: item.wea13_id,\n              wea13_type: item.wea13_type,\n            },\n            geometry: item.geometry, \n          })),\n        };\n        setGeoJsonData(featureCollection);\n      } catch (error) {\n        console.error('Error fetching geographical data:', error);\n      }\n    };\n\n    fetchPoints();\n  }, []);\n\n        // blue circles\n        const pointToLayer = (feature, latlng) => {\n          return L.circleMarker(latlng, {\n            radius: 5, \n            fillColor: '#53698c',\n            color: '#000',\n            weight: 1,\n            opacity: 1,\n            fillOpacity: 0.8,\n          });\n        };\n\n      const onEachFeature = (feature, layer) => {\n      if (feature.properties) {\n      const props = feature.properties;\n      layer.bindPopup(\n        `<div>\n          <strong>Landslide ID:</strong> ${props.landslideid}<br/>\n          <strong>Type:</strong> ${props.lsType}<br/>\n          <strong>Source:</strong> ${props.lssource}<br/>\n          <strong>Impact:</strong> ${props.impact}<br/>\n          <strong>Latitude:</strong> ${props.latitude}<br/>\n          <strong>Longitude:</strong> ${props.longitude}<br/>\n          ${props.wea13_id ? `<strong>WEA13 ID:</strong> ${props.wea13_id}<br/>` : ''}\n          ${props.wea13_type ? `<strong>WEA13 Type:</strong> ${props.wea13_type}<br/>` : ''}\n        </div>`\n       );\n      }\n    };\n\n      const displayMap = useMemo(\n      () => (\n          <MapContainer\n          center={center}\n          zoom={zoom}\n          scrollWheelZoom={false}\n          style={{ height: '85vh', width: '100%' }}\n          >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n           <MapContent setMapInstance={setMap} />\n\n           {geoJsonData && (\n          <GeoJSON\n            data={geoJsonData}\n            pointToLayer={pointToLayer}\n            onEachFeature={onEachFeature}\n          />\n        )}\n          </MapContainer>\n        ),\n    [geoJsonData],\n    )\n\n    return (\n      <div className = \"MapContainerWrapper\">\n        {displayMap}\n      </div>\n    )\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}