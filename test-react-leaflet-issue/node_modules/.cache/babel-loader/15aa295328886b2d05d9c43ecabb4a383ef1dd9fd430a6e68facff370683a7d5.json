{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/ReportForm.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// for marker\nimport L from 'leaflet';\nimport iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconUrl from 'leaflet/dist/images/marker-icon.png';\nimport shadowUrl from 'leaflet/dist/images/marker-shadow.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetinaUrl,\n  iconUrl: iconUrl,\n  shadowUrl: shadowUrl\n});\nconst landslideTypes = ['Debris', 'Flow', 'Rock', 'Lateral', 'Coherent'];\nconst landslideSources = ['Natural', 'Modified'];\nconst impactOptions = ['None', 'Road', 'Econ', 'Structure'];\nconst wea13Types = ['Coherent', 'Lateral Spread', 'Disrupted', 'None'];\nexport default function ReportForm() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [landslideID, setLandslideID] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [lsType, setLsType] = useState('');\n  const [lsSource, setLsSource] = useState('');\n  const [impact, setImpact] = useState('');\n  const [wea13id, setWea13id] = useState('');\n  const [wea13type, setWea13type] = useState('');\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n  const [formMessage, setFormMessage] = useState('');\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const mapRef = useRef(null);\n\n  // gets max lsID from database and addds one to the assigned for new data\n  useEffect(() => {\n    const fetchMaxIDs = async () => {\n      setStatus('generating_ids');\n      setError(null);\n      try {\n        const response = await fetch('http://127.0.0.1:8000/get-max-ids/');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const currentMaxLandslideID = data.max_landslide_id !== null ? parseInt(data.max_landslide_id) : 100089;\n        const nextLandslideID = currentMaxLandslideID + 1;\n        setLandslideID(String(nextLandslideID));\n        setStatus('idle');\n        console.log(\"IDs generated successfully.\");\n      } catch (err) {\n        console.error(\"Failed to fetch max IDs:\", err);\n        setError(new Error('Failed to generate IDs. Please check backend.'));\n        setStatus('error');\n      }\n    };\n    fetchMaxIDs();\n  }, []);\n\n  // set lat & long from click on map\n  function MapClickHandler() {\n    _s();\n    useMapEvents({\n      click: e => {\n        setLatitude(e.latlng.lat.toFixed(4));\n        setLongitude(e.latlng.lng.toFixed(4));\n        setMarkerPosition(e.latlng);\n      }\n    });\n    return null;\n  }\n  _s(MapClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n    return [useMapEvents];\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setStatus('submitting');\n    setError(null);\n    setFormMessage('');\n    if (!latitude || !longitude || !lsType || !lsSource || !impact || !wea13type) {\n      setError(new Error('Please fill in all required fields (including map click).'));\n      setStatus('idle');\n      return;\n    }\n    try {\n      // sets everything in database\n      const response = await fetch('http://127.0.0.1:8000/data-imports/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          landslideID: landslideID,\n          latitude: parseFloat(latitude),\n          longitude: parseFloat(longitude),\n          lsType: lsType,\n          lsSource: lsSource,\n          impact: impact,\n          wea13id: wea13id,\n          wea13type: wea13type === 'None' ? null : wea13type\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setFormMessage(`Record added successfully! ID: ${result.landslideID}`);\n        setStatus('success');\n        setLatitude('');\n        setLongitude('');\n        setLsType('');\n        setLsSource('');\n        setImpact('');\n        setWea13type('');\n        setMarkerPosition(null);\n      } else {\n        const errorData = await response.json();\n        setError(new Error(errorData.detail || `Server error: ${response.status}`));\n        setStatus('error');\n      }\n    } catch (err) {\n      console.error(\"Network or submission error:\", err);\n      setError(new Error('Failed to submit data. Please check network or server.'));\n      setStatus('error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-data-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Landslide Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), status === 'generating_ids' && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Generating IDs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 45\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 23\n    }, this), formMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: formMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"landslideId\",\n          children: \"Landslide ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"landslideId\",\n          type: \"text\",\n          value: landslideID,\n          readOnly: true,\n          disabled: status === 'submitting' || status === 'generating_ids'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"latitude\",\n          children: \"Latitude (Click Map):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"latitude\",\n          type: \"text\",\n          value: latitude,\n          readOnly: true,\n          disabled: status === 'submitting',\n          placeholder: \"Click on map to set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"longitude\",\n          children: \"Longitude (Click Map):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"longitude\",\n          type: \"text\",\n          value: longitude,\n          readOnly: true,\n          disabled: status === 'submitting',\n          placeholder: \"Click on map to set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-input-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [38.6263, -95.1751],\n          zoom: 2,\n          scrollWheelZoom: true,\n          style: {\n            height: '300px',\n            width: '100%',\n            borderRadius: '8px',\n            marginBottom: '15px'\n          },\n          whenCreated: mapInstance => {\n            mapRef.current = mapInstance;\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MapClickHandler, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this), markerPosition && /*#__PURE__*/_jsxDEV(Marker, {\n            position: markerPosition,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: [\"Lat: \", markerPosition.lat.toFixed(4), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 74\n              }, this), \"Lon: \", markerPosition.lng.toFixed(4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lsType\",\n          children: \"Landslide Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"lsType\",\n          value: lsType,\n          onChange: e => setLsType(e.target.value),\n          required: true,\n          disabled: status === 'submitting',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), landslideTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type,\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lsSource\",\n          children: \"Landslide Source:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"lsSource\",\n          value: lsSource,\n          onChange: e => setLsSource(e.target.value),\n          required: true,\n          disabled: status === 'submitting',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Source\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), landslideSources.map(source => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: source,\n            children: source\n          }, source, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"impact\",\n          children: \"Impact:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"impact\",\n          value: impact,\n          onChange: e => setImpact(e.target.value),\n          required: true,\n          disabled: status === 'submitting',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Impact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), impactOptions.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: opt,\n            children: opt\n          }, opt, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"wea13type\",\n          children: \"wea13 Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"wea13type\",\n          value: wea13type,\n          onChange: e => setWea13type(e.target.value),\n          required: true,\n          disabled: status === 'submitting',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select wea13 Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), wea13Types.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type,\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: status === 'submitting' || status === 'generating_ids',\n        children: status === 'submitting' ? 'Adding Data...' : status === 'generating_ids' ? 'Loading IDs...' : 'Add Record'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n_s2(ReportForm, \"QQnPeMLwpPPFn71nFWBlnuUXYOY=\");\n_c = ReportForm;\nvar _c;\n$RefreshReg$(_c, \"ReportForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","useMapEvents","L","iconRetinaUrl","iconUrl","shadowUrl","jsxDEV","_jsxDEV","Icon","Default","mergeOptions","landslideTypes","landslideSources","impactOptions","wea13Types","ReportForm","_s2","_s","$RefreshSig$","landslideID","setLandslideID","latitude","setLatitude","longitude","setLongitude","lsType","setLsType","lsSource","setLsSource","impact","setImpact","wea13id","setWea13id","wea13type","setWea13type","status","setStatus","error","setError","formMessage","setFormMessage","markerPosition","setMarkerPosition","mapRef","fetchMaxIDs","response","fetch","ok","Error","data","json","currentMaxLandslideID","max_landslide_id","parseInt","nextLandslideID","String","console","log","err","MapClickHandler","click","e","latlng","lat","toFixed","lng","handleSubmit","preventDefault","method","headers","body","JSON","stringify","parseFloat","result","errorData","detail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onSubmit","htmlFor","id","type","value","readOnly","disabled","placeholder","center","zoom","scrollWheelZoom","style","height","width","borderRadius","marginBottom","whenCreated","mapInstance","current","attribution","url","position","onChange","target","required","map","source","opt","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/ReportForm.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css'; \n\n// for marker\nimport L from 'leaflet';\nimport iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconUrl from 'leaflet/dist/images/marker-icon.png';\nimport shadowUrl from 'leaflet/dist/images/marker-shadow.png';\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetinaUrl,\n  iconUrl: iconUrl,\n  shadowUrl: shadowUrl,\n});\n\nconst landslideTypes = ['Debris', 'Flow', 'Rock', 'Lateral', 'Coherent'];\nconst landslideSources = ['Natural', 'Modified'];\nconst impactOptions = ['None', 'Road', 'Econ', 'Structure'];\nconst wea13Types = ['Coherent', 'Lateral Spread', 'Disrupted', 'None']; \n\nexport default function ReportForm() {\n\n    const [landslideID, setLandslideID] = useState(''); \n    const [latitude, setLatitude] = useState('');\n    const [longitude, setLongitude] = useState('');\n    const [lsType, setLsType] = useState('');\n    const [lsSource, setLsSource] = useState('');\n    const [impact, setImpact] = useState('');\n    const [wea13id, setWea13id] = useState(''); \n    const [wea13type, setWea13type] = useState('');\n\n    const [status, setStatus] = useState('idle'); \n    const [error, setError] = useState(null);\n    const [formMessage, setFormMessage] = useState('');\n\n    const [markerPosition, setMarkerPosition] = useState(null);\n\n    const mapRef = useRef(null);\n\n    // gets max lsID from database and addds one to the assigned for new data\n    useEffect(() => {\n        const fetchMaxIDs = async () => {\n            setStatus('generating_ids');\n            setError(null);\n            try {\n                const response = await fetch('http://127.0.0.1:8000/get-max-ids/');\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n\n                const currentMaxLandslideID = data.max_landslide_id !== null ? parseInt(data.max_landslide_id) : 100089;\n                const nextLandslideID = currentMaxLandslideID + 1;\n\n                setLandslideID(String(nextLandslideID));\n                setStatus('idle');\n                console.log(\"IDs generated successfully.\");\n            } catch (err) {\n                console.error(\"Failed to fetch max IDs:\", err);\n                setError(new Error('Failed to generate IDs. Please check backend.'));\n                setStatus('error');\n            }\n        };\n\n        fetchMaxIDs();\n    }, []); \n\n    // set lat & long from click on map\n    function MapClickHandler() {\n        useMapEvents({\n            click: (e) => {\n                setLatitude(e.latlng.lat.toFixed(4)); \n                setLongitude(e.latlng.lng.toFixed(4));\n                setMarkerPosition(e.latlng);\n            },\n        });\n        return null; \n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setStatus('submitting');\n        setError(null);\n        setFormMessage('');\n\n        if (!latitude || !longitude || !lsType || !lsSource || !impact || !wea13type) {\n            setError(new Error('Please fill in all required fields (including map click).'));\n            setStatus('idle');\n            return;\n        }\n\n        try {\n\n            // sets everything in database\n            const response = await fetch('http://127.0.0.1:8000/data-imports/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    landslideID: landslideID,\n                    latitude: parseFloat(latitude),\n                    longitude: parseFloat(longitude),\n                    lsType: lsType,\n                    lsSource: lsSource,\n                    impact: impact,\n                    wea13id: wea13id, \n                    wea13type: wea13type === 'None' ? null : wea13type,}),\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                setFormMessage(`Record added successfully! ID: ${result.landslideID}`);\n                setStatus('success');\n\n                setLatitude('');\n                setLongitude('');\n                setLsType('');\n                setLsSource('');\n                setImpact('');\n                setWea13type('');\n                setMarkerPosition(null);\n            } else {\n                const errorData = await response.json();\n                setError(new Error(errorData.detail || `Server error: ${response.status}`));\n                setStatus('error');\n            }\n        } catch (err) {\n            console.error(\"Network or submission error:\", err);\n            setError(new Error('Failed to submit data. Please check network or server.'));\n            setStatus('error');\n        }\n    }; \n\n    return (\n        <div className=\"add-data-form-container\">\n            <h2>Add New Landslide Data</h2>\n            {status === 'generating_ids' && <p className=\"loading-message\">Generating IDs...</p>}\n            {error && <p className=\"error-message\">Error: {error.message}</p>}\n            {formMessage && <p className=\"success-message\">{formMessage}</p>}\n\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"landslideId\">Landslide ID:</label>\n                    <input\n                        id=\"landslideId\"\n                        type=\"text\"\n                        value={landslideID}\n                        readOnly \n                        disabled={status === 'submitting' || status === 'generating_ids'}\n                    />\n                </div>\n\n             {/* got rid of the wea13 id because in the database they stopped generating after a certain point*/}\n                <div className=\"form-group\">\n                    <label htmlFor=\"latitude\">Latitude (Click Map):</label>\n                    <input\n                        id=\"latitude\"\n                        type=\"text\"\n                        value={latitude}\n                        readOnly \n                        disabled={status === 'submitting'}\n                        placeholder=\"Click on map to set\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"longitude\">Longitude (Click Map):</label>\n                    <input\n                        id=\"longitude\"\n                        type=\"text\"\n                        value={longitude}\n                        readOnly \n                        disabled={status === 'submitting'}\n                        placeholder=\"Click on map to set\"\n                    />\n                </div>\n\n                <div className=\"map-input-section\">\n                    <MapContainer\n                        center={[38.6263, -95.1751]} \n                        zoom={2}\n                        scrollWheelZoom={true}\n                        style={{ height: '300px', width: '100%', borderRadius: '8px', marginBottom: '15px' }}\n                        whenCreated={mapInstance => { mapRef.current = mapInstance; }} \n                    >\n                        <TileLayer\n                            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n                        <MapClickHandler />\n                        {markerPosition && (\n                            <Marker position={markerPosition}>\n                                <Popup>\n                                    Lat: {markerPosition.lat.toFixed(4)} <br />\n                                    Lon: {markerPosition.lng.toFixed(4)}\n                                </Popup>\n                            </Marker>\n                        )}\n                    </MapContainer>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"lsType\">Landslide Type:</label>\n                    <select\n                        id=\"lsType\"\n                        value={lsType}\n                        onChange={(e) => setLsType(e.target.value)}\n                        required\n                        disabled={status === 'submitting'}\n                    >\n                        <option value=\"\">Select Type</option>\n                        {landslideTypes.map(type => (\n                            <option key={type} value={type}>{type}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"lsSource\">Landslide Source:</label>\n                    <select\n                        id=\"lsSource\"\n                        value={lsSource}\n                        onChange={(e) => setLsSource(e.target.value)}\n                        required\n                        disabled={status === 'submitting'}\n                    >\n                        <option value=\"\">Select Source</option>\n                        {landslideSources.map(source => (\n                            <option key={source} value={source}>{source}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"impact\">Impact:</label>\n                    <select\n                        id=\"impact\"\n                        value={impact}\n                        onChange={(e) => setImpact(e.target.value)}\n                        required\n                        disabled={status === 'submitting'}\n                    >\n                        <option value=\"\">Select Impact</option>\n                        {impactOptions.map(opt => (\n                            <option key={opt} value={opt}>{opt}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"wea13type\">wea13 Type:</label>\n                    <select\n                        id=\"wea13type\"\n                        value={wea13type}\n                        onChange={(e) => setWea13type(e.target.value)}\n                        required\n                        disabled={status === 'submitting'}\n                    >\n                        <option value=\"\">Select wea13 Type</option>\n                        {wea13Types.map(type => (\n                            <option key={type} value={type}>{type}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <button type=\"submit\" disabled={status === 'submitting' || status === 'generating_ids'}>\n                    {status === 'submitting' ? 'Adding Data...' : status === 'generating_ids' ? 'Loading IDs...' : 'Add Record'}\n                </button>\n            </form>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}