{"ast":null,"code":"var _jsxFileName = \"/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst AuthPage = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  const [inputUsername, setInputUsername] = useState('');\n  const API_BASE_URL = 'http://127.0.0.1:8000';\n  const navigate = useNavigate();\n  const applyAuthData = useCallback((authToken, userData = null) => {\n    setAuthError('');\n    setMessage('');\n    if (authToken && userData) {\n      localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n      setToken(authToken);\n      setUser({\n        email: userData.user_email,\n        uid: userData.user_id,\n        username: userData.username\n      });\n      setUserId(userData.user_id);\n    } else {\n      localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n      setToken(null);\n      setUser(null);\n      setUserId(null);\n    }\n  }, []);\n  const fetchUserFromToken = useCallback(async authToken => {\n    if (!authToken) {\n      applyAuthData(null);\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data && typeof data.user_id === 'string' && typeof data.user_email === 'string') {\n          applyAuthData(authToken, {\n            id: data.user_id,\n            email: data.user_email\n          });\n        } else {\n          console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n          applyAuthData(null);\n        }\n      } else {\n        const errorData = await response.json();\n        console.error(\"DEBUG: /users/me fetch failed. Status:\", response.status, \"Details:\", errorData);\n        applyAuthData(null);\n      }\n    } catch (error) {\n      console.error('DEBUG: Network error during /users/me fetch:', error);\n      applyAuthData(null);\n    } finally {\n      setIsLoadingAuth(false);\n    }\n  }, [API_BASE_URL, applyAuthData]);\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    if (storedToken) {\n      fetchUserFromToken(storedToken);\n    } else {\n      setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]);\n  const handleSignUp = async () => {\n    setAuthError('');\n    setMessage('');\n    if (!inputEmail || !inputPassword || !inputUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_email: inputEmail,\n          user_password: inputPassword,\n          username: inputUsername\n        })\n      });\n      if (response.ok) {\n        const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername);\n        if (signInSuccess) {\n          setMessage('Account created successfully! You are now logged in.');\n          setInputEmail('');\n          setInputPassword('');\n          setInputUsername('');\n          navigate('/');\n        } else {\n          setAuthError('Account created, but automatic login failed. Please sign in manually.');\n        }\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up network error:', error);\n      setAuthError('Network error. Please try again.');\n    }\n  };\n  const handleSignInInternal = async (signInEmail, signInPassword, signInUsername) => {\n    setAuthError('');\n    setMessage('');\n    if (!signInEmail || !signInPassword || !signInUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return false;\n    }\n    try {\n      const details = new URLSearchParams();\n      details.append('email', signInEmail);\n      details.append('password', signInPassword);\n      details.append('username', signInUsername);\n      const response = await fetch(`${API_BASE_URL}/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: details.toString()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        applyAuthData(data.access_token, {\n          id: data.user_id,\n          email: data.email\n        });\n        setMessage('Logged in successfully!');\n        setInputEmail('');\n        setInputPassword('');\n        setInputUsername('');\n        navigate('/');\n        return true;\n      } else {\n        const errorData = await response.json();\n        setAuthError(errorData.detail || 'Invalid email, username, or password.');\n        return false;\n      }\n    } catch (error) {\n      console.error('Sign in network error:', error);\n      setAuthError('Network error. Please try again.');\n      return false;\n    }\n  };\n  const handleSignIn = async () => {\n    await handleSignInInternal(inputEmail, inputPassword, inputUsername);\n  };\n  const handleSignOut = useCallback(async () => {\n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null);\n    navigate('/');\n  }, [applyAuthData, navigate]);\n  const authContextValue = useMemo(() => ({\n    user,\n    userId,\n    token,\n    isLoadingAuth,\n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n  if (isLoadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-loading-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-loading-text\",\n          children: \"Loading authentication...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: authContextValue,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-page-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-form-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"auth-form-title\",\n            children: \"Landslide Report Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-error-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Error:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auth-info-message\",\n            role: \"alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"auth-message-strong\",\n              children: \"Info:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"auth-message-span\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"auth-label\",\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                id: \"user_email\",\n                value: inputEmail,\n                onChange: e => setInputEmail(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"your.email@example.com\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"username\",\n                className: \"auth-label\",\n                children: \"Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"username\",\n                id: \"username\",\n                value: inputUsername,\n                onChange: e => setInputUsername(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"auth-label\",\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"user_password\",\n                id: \"password\",\n                value: inputPassword,\n                onChange: e => setInputPassword(e.target.value),\n                className: \"auth-input\",\n                placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auth-button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignIn,\n                className: \"auth-button auth-button-primary\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSignUp,\n                className: \"auth-button auth-button-secondary\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"RdFSY5cYsyBlkhYA/pbGIpOa+Vw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useCallback","useMemo","useNavigate","jsxDEV","_jsxDEV","LOCAL_STORAGE_AUTH_TOKEN_KEY","AuthContext","AuthPage","children","_s","user","setUser","userId","setUserId","token","setToken","isLoadingAuth","setIsLoadingAuth","authError","setAuthError","message","setMessage","inputEmail","setInputEmail","inputPassword","setInputPassword","inputUsername","setInputUsername","API_BASE_URL","navigate","applyAuthData","authToken","userData","localStorage","setItem","email","user_email","uid","user_id","username","removeItem","fetchUserFromToken","response","fetch","method","headers","ok","data","json","id","console","error","errorData","status","storedToken","getItem","handleSignUp","body","JSON","stringify","user_password","signInSuccess","handleSignInInternal","detail","signInEmail","signInPassword","signInUsername","details","URLSearchParams","append","toString","access_token","handleSignIn","handleSignOut","authContextValue","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","role","htmlFor","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/emmaholt/Desktop/DataImport2/test-react-leaflet-issue/src/AuthPage.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom'; \n\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landslide_app_auth_token';\n\nexport const AuthContext = createContext(null);\n\nconst AuthPage = ({ children }) => {\n  const [user, setUser] = useState(null); \n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); \n\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true); \n\n  const [authError, setAuthError] = useState('');\n  const [message, setMessage] = useState('');\n\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPassword, setInputPassword] = useState('');\n  const [inputUsername, setInputUsername] = useState('');\n\n  const API_BASE_URL = 'http://127.0.0.1:8000'; \n\n  const navigate = useNavigate();\n\n  const applyAuthData = useCallback((authToken, userData = null) => {\n      setAuthError(''); \n      setMessage('');   \n\n      if (authToken && userData) {\n          localStorage.setItem(LOCAL_STORAGE_AUTH_TOKEN_KEY, authToken);\n          setToken(authToken);\n          setUser({ email: userData.user_email, uid: userData.user_id, username: userData.username }); \n          setUserId(userData.user_id); \n      } else {\n          localStorage.removeItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n          setToken(null);\n          setUser(null);\n          setUserId(null); \n      }\n  }, []); \n\n  const fetchUserFromToken = useCallback(async (authToken) => {\n      if (!authToken) {\n          applyAuthData(null); \n          return;\n      }\n\n      try {\n          const response = await fetch(`${API_BASE_URL}/users/me`, {\n              method: 'GET',\n              headers: {\n                  'Authorization': `Bearer ${authToken}`, \n                  'Content-Type': 'application/json',\n              },\n          });\n\n          if (response.ok) {\n              const data = await response.json(); \n              if (data && typeof data.user_id === 'string' && typeof data.user_email === 'string') {\n                  applyAuthData(authToken, { id: data.user_id, email: data.user_email }); \n              } else {\n                  console.error(\"DEBUG: /users/me response missing expected 'id' or 'email' or wrong type:\", data);\n                  applyAuthData(null); \n              }\n          } else {\n              const errorData = await response.json();\n              console.error(\"DEBUG: /users/me fetch failed. Status:\", response.status, \"Details:\", errorData);\n              applyAuthData(null); \n          }\n      } catch (error) {\n          console.error('DEBUG: Network error during /users/me fetch:', error);\n          applyAuthData(null); \n      } finally {\n          setIsLoadingAuth(false); \n      }\n  }, [API_BASE_URL, applyAuthData]); \n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY);\n    \n    if (storedToken) {\n        fetchUserFromToken(storedToken);\n    } else {\n        setIsLoadingAuth(false);\n    }\n  }, [fetchUserFromToken]); \n\n\n  const handleSignUp = async () => { \n    setAuthError('');\n    setMessage('');\n    if (!inputEmail || !inputPassword || !inputUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return;\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/register`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ user_email: inputEmail, user_password: inputPassword, username: inputUsername }),\n        });\n\n        if (response.ok) {\n            const signInSuccess = await handleSignInInternal(inputEmail, inputPassword, inputUsername); \n            if (signInSuccess) {\n                setMessage('Account created successfully! You are now logged in.');\n                setInputEmail('');\n                setInputPassword('');\n                setInputUsername('');\n                navigate('/'); \n            } else {\n                setAuthError('Account created, but automatic login failed. Please sign in manually.');\n            }\n        } else {\n            const errorData = await response.json();\n            setAuthError(errorData.detail || 'Sign up failed.');\n        }\n    } catch (error) {\n        console.error('Sign up network error:', error);\n        setAuthError('Network error. Please try again.');\n    }\n  };\n\n  const handleSignInInternal = async (signInEmail, signInPassword, signInUsername) => { \n    setAuthError('');\n    setMessage('');\n    if (!signInEmail || !signInPassword || !signInUsername) {\n      setAuthError('Please enter email, username, and password.');\n      return false; \n    }\n\n    try {\n        const details = new URLSearchParams();\n        details.append('email', signInEmail); \n        details.append('password', signInPassword);\n        details.append('username', signInUsername);\n\n        const response = await fetch(`${API_BASE_URL}/token`, { \n            method: 'POST',\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            body: details.toString(),\n        });\n\n        if (response.ok) {\n            const data = await response.json(); \n            applyAuthData(data.access_token, { id: data.user_id, email: data.email });\n            setMessage('Logged in successfully!');\n            setInputEmail('');\n            setInputPassword('');\n            setInputUsername('');\n            navigate('/'); \n            return true; \n        } else {\n            const errorData = await response.json();\n            setAuthError(errorData.detail || 'Invalid email, username, or password.');\n            return false; \n        }\n    } catch (error) {\n        console.error('Sign in network error:', error);\n        setAuthError('Network error. Please try again.');\n        return false; \n    }\n  };\n\n  const handleSignIn = async () => {\n    await handleSignInInternal(inputEmail, inputPassword, inputUsername);\n  };\n\n  const handleSignOut = useCallback(async () => { \n    setAuthError('');\n    setMessage('Logged out successfully.');\n    applyAuthData(null); \n    navigate('/'); \n  }, [applyAuthData, navigate]); \n\n  const authContextValue = useMemo(() => ({\n    user,\n    userId, \n    token,  \n    isLoadingAuth, \n    authError,\n    message,\n    handleSignIn,\n    handleSignUp,\n    handleSignOut,\n  }), [user, userId, token, isLoadingAuth, authError, message, handleSignIn, handleSignUp, handleSignOut]);\n\n\n  if (isLoadingAuth) {\n    return (\n      <div className=\"auth-loading-container\">\n        <div className=\"auth-loading-box\">\n          <p className=\"auth-loading-text\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!token) { \n    return (\n      <AuthContext.Provider value={authContextValue}>\n        <div className=\"auth-page-container\">\n          <div className=\"auth-form-card\">\n            <h2 className=\"auth-form-title\">\n              Landslide Report Login\n            </h2>\n\n            {authError && (\n              <div className=\"auth-error-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Error:</strong>\n                <span className=\"auth-message-span\">{authError}</span>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"auth-info-message\" role=\"alert\">\n                <strong className=\"auth-message-strong\">Info:</strong>\n                <span className=\"auth-message-span\">{message}</span>\n              </div>\n            )}\n            \n            <div>\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"email\" className=\"auth-label\">\n                  Email:\n                </label>\n                <input\n                  type=\"email\" \n                  id=\"user_email\"\n                  value={inputEmail} \n                  onChange={(e) => setInputEmail(e.target.value)} \n                  className=\"auth-input\"\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"username\" className=\"auth-label\">\n                  Username:\n                </label>\n                <input\n                type=\"username\"\n                id=\"username\"\n                value={inputUsername}\n                onChange={(e) => setInputUsername(e.target.value)}\n                className=\"auth-input\"\n                placeholder=\"username\"\n                />\n              </div>\n\n              <div className=\"auth-input-group\">\n                <label htmlFor=\"password\" className=\"auth-label\">\n                  Password:\n                </label>\n                <input\n                  type=\"user_password\"\n                  id=\"password\"\n                  value={inputPassword} \n                  onChange={(e) => setInputPassword(e.target.value)} \n                  className=\"auth-input\"\n                  placeholder=\"••••••••\"\n                />\n              </div>\n\n              <div className=\"auth-button-group\">\n                <button\n                  onClick={handleSignIn} \n                  className=\"auth-button auth-button-primary\"\n                >\n                  Sign In\n                </button>\n                <button\n                  onClick={handleSignUp} \n                  className=\"auth-button auth-button-secondary\"\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AuthContext.Provider>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthPage;\n\n\n// //Old auth page\n// // import React, { useState, useEffect, createContext } from 'react';\n\n// // //NOTES: change from local storage to db storage\n// // //report form is accessing userID sucessfully  but is not reporting it to the backend\n// // // \"Error: [object Object]\"\n\n// // // Define keys for localStorage.\n// // const LOCAL_STORAGE_USER_KEY = 'landslide_app_user';\n// // const LOCAL_STORAGE_EXPLICIT_LOGIN_KEY = 'landslide_app_explicit_login';\n// // const LOCAL_STORAGE_REGISTERED_USERS_KEY = 'landslide_app_registered_users';\n\n// // const LOCAL_STORAGE_AUTH_TOKEN_KEY = 'landlside_app_auth_token';\n// // export const AuthContext = createContext(null);\n\n// // const AuthPage = ({ children }) => {\n// //  // const [user, setUser] = useState(null);\n// //   const [userID, setUserID] = useState(null);\n// //  // const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(false);\n\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [authError, setAuthError] = useState('');\n// //   const [authReady, setAuthReady] = useState(false);\n// //   const [message, setMessage] = useState('');\n\n// //   const [user, setUser] = useState(() => {\n// //     try {\n// //       const storedUser = localStorage.getItem(LOCAL_STORAGE_USER_KEY);\n// //       return storedUser ? JSON.parse(storedUser) : null;\n// //     } catch (error) {\n// //       return null;\n// //     }\n// //   });\n\n// //   const [userId, setUserId] = useState(() => user ? user.uid : null);\n\n// //   const [isExplicitlyLoggedIn, setIsExplicitlyLoggedIn] = useState(() => {\n// //     try {\n// //       const storedLoginStatus = localStorage.getItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //       return storedLoginStatus === 'true';\n// //     } catch (error) {\n// //       return false;\n// //     }\n// //   });\n\n// //   const [registeredUsers, setRegisteredUsers] = useState(() => {\n// //     try {\n// //       const storedRegisteredUsers = localStorage.getItem(LOCAL_STORAGE_REGISTERED_USERS_KEY);\n// //       return storedRegisteredUsers ? JSON.parse(storedRegisteredUsers) : {};\n// //     } catch (error) {\n// //       return {};\n// //     }\n// //   });\n\n// //   // const [email, setEmail] = useState('');\n// //   // const [password, setPassword] = useState('');\n// //   // const [authError, setAuthError] = useState('');\n// //   // const [authReady, setAuthReady] = useState(false);\n// //   // const [message, setMessage] = useState('');\n\n// //   useEffect(() => {\n// //     setAuthReady(true);\n// //     if (isExplicitlyLoggedIn && user) {\n// //       setMessage(`Welcome back, ${user.email}!`);\n// //     } else {\n// //       setMessage('Please log in or sign up to access the application.');\n// //     }\n// //   }, []);\n\n// //   // useEffect(() => {\n// //   //   if (user) {\n// //   //     localStorage.setItem(LOCAL_STORAGE_USER_KEY, JSON.stringify(user));\n// //   //   } else {\n// //   //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //   //   }\n// //   //   localStorage.setItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY, String(isExplicitlyLoggedIn));\n// //   // }, [user, isExplicitlyLoggedIn]);\n\n// //   // useEffect(() => {\n// //   //   localStorage.setItem(LOCAL_STORAGE_REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n// //   // }, [registeredUsers]);\n\n\n// //   const handleSignUp = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     if (registeredUsers[email]) {\n// //       setAuthError('An account with this email already exists. Please sign in.');\n// //       return;\n// //     }\n\n// //     const newUid = `${btoa(email).slice(0, 10)}`; //random 10 char string\n// //     const newUserProfile = { email: email, uid: newUid };\n\n// //     setRegisteredUsers(prev => ({\n// //       ...prev,\n// //       [email]: { password: password, uid: newUid }\n// //     }));\n\n// //     setUser(newUserProfile);\n// //     setUserId(newUid);\n// //     setIsExplicitlyLoggedIn(true);\n// //     setMessage('Account created successfully! You are now logged in.');\n// //   };\n\n// //   const handleSignIn = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     if (!email || !password) {\n// //       setAuthError('Please enter both email and password.');\n// //       return;\n// //     }\n\n// //     const storedUser = registeredUsers[email];\n\n// //     if (!storedUser) {\n// //       setAuthError('No account found with this email/password. Please sign up.');\n// //       setIsExplicitlyLoggedIn(false);\n// //       return;\n// //     }\n\n// //     if (storedUser.password === password) {\n// //       const loggedInUser = { email: email, uid: storedUser.uid };\n// //       setUser(loggedInUser);\n// //       setUserID(loggedInUser.uid);\n// //       setIsExplicitlyLoggedIn(true);\n// //       setMessage('Logged in successfully!');\n// //     } else {\n// //       setAuthError('Invalid email or password.');\n// //       setIsExplicitlyLoggedIn(false);\n// //     }\n// //   };\n\n// //   const handleSignOut = async () => {\n// //     setAuthError('');\n// //     setMessage('');\n// //     if (!authReady) {\n// //       setAuthError('Authentication not ready. Please wait.');\n// //       return;\n// //     }\n// //     setUser(null);\n// //     setUserId(null);\n// //     setIsExplicitlyLoggedIn(false);\n// //     setMessage('Logged out successfully.');\n\n// //     localStorage.removeItem(LOCAL_STORAGE_USER_KEY);\n// //     localStorage.removeItem(LOCAL_STORAGE_EXPLICIT_LOGIN_KEY);\n// //   };\n\n// //   const authContextValue = {\n// //     user,\n// //     userId,\n// //     authReady,\n// //     isExplicitlyLoggedIn,\n// //     authError,\n// //     message,\n// //     handleSignIn,\n// //     handleSignUp,\n// //     handleSignOut,\n// //     setEmail,\n// //     setPassword,\n// //     email,\n// //     password,\n// //   };\n\n// //   if (!authReady) {\n// //     return (\n// //       <div className=\"auth-loading-container\">\n// //         <div className=\"auth-loading-box\">\n// //           <p className=\"auth-loading-text\">Loading authentication...</p>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (!isExplicitlyLoggedIn) {\n// //     return (\n// //       <AuthContext.Provider value={authContextValue}>\n// //         <div className=\"auth-page-container\">\n// //           <div className=\"auth-form-card\">\n// //             <h2 className=\"auth-form-title\">\n// //               Landslide Report Login\n// //             </h2>\n\n// //             {authError && (\n// //               <div className=\"auth-error-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Error:</strong>\n// //                 <span className=\"auth-message-span\">{authError}</span>\n// //               </div>\n// //             )}\n\n// //             {message && (\n// //               <div className=\"auth-info-message\" role=\"alert\">\n// //                 <strong className=\"auth-message-strong\">Info:</strong>\n// //                 <span className=\"auth-message-span\">{message}</span>\n// //               </div>\n// //             )}\n\n// //             <div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"email\" className=\"auth-label\">\n// //                   Email:\n// //                 </label>\n// //                 <input\n// //                   type=\"email\"\n// //                   id=\"email\"\n// //                   value={email}\n// //                   onChange={(e) => setEmail(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"your.email@example.com\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-input-group\">\n// //                 <label htmlFor=\"password\" className=\"auth-label\">\n// //                   Password:\n// //                 </label>\n// //                 <input\n// //                   type=\"password\"\n// //                   id=\"password\"\n// //                   value={password}\n// //                   onChange={(e) => setPassword(e.target.value)}\n// //                   className=\"auth-input\"\n// //                   placeholder=\"••••••••\"\n// //                 />\n// //               </div>\n// //               <div className=\"auth-button-group\">\n// //                 <button\n// //                   onClick={handleSignIn}\n// //                   className=\"auth-button auth-button-primary\"\n// //                 >\n// //                   Sign In\n// //                 </button>\n// //                 <button\n// //                   onClick={handleSignUp}\n// //                   className=\"auth-button auth-button-secondary\"\n// //                 >\n// //                   Sign Up\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </AuthContext.Provider>\n// //     );\n// //   }\n\n// //   return (\n// //     <AuthContext.Provider value={authContextValue}>\n// //       {children}\n// //     </AuthContext.Provider>\n// //   );\n// // };\n\n// // export default AuthPage;"],"mappings":"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A,QAgBKL,WAAW;AAAA;AAAAwF,EAAA,GAhBxBnF,QAAQ;AA+Rd,eAAeA,QAAQ;;AAGvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}